// Code generated by protoc-gen-go.
// source: iax.proto
// DO NOT EDIT!

/*
Package iax is a generated protocol buffer package.

option java_generate_equals_and_hash = true;
option java_generic_services = true;
option java_multiple_files = true;

It is generated from these files:
	iax.proto

It has these top-level messages:
	BidRequest
	BidResponse
*/
package iax

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BidRequest struct {
	// 请求ID，唯一标识本次请求，明文字符串
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 默认每次请求一个广告位
	// Always   yes
	Imp []*BidRequest_Impression `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	// 网站信息
	// Always   Yes, if this impression is a banner ad opportunity.
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site" json:"site,omitempty"`
	// App Object. Only application for apps.
	// Always   Yes, if this impression is a video ad opportunity.
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
	// Always   yes
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// 用户信息
	// Always   yes
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// Indicator of test mode in which auctions are not billable, where 0 = live mode, 1 = test mode, default 0.
	// Always   no
	Test int32 `protobuf:"varint,7,opt,name=test" json:"test,omitempty"`
	// 最大竞价时间，单位milliseconds   Maximum time in milliseconds to submit a bid to avoid timeout, default 100.
	// Always   no
	Tmax int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	// 竞价货币类型, 默认为人民币(CNY)   Array of allowed currencies for bids on this bid request using ISO-4217 alpha codes.
	// Always   no
	Cur []string `protobuf:"bytes,9,rep,name=cur" json:"cur,omitempty"`
}

func (m *BidRequest) Reset()                    { *m = BidRequest{} }
func (m *BidRequest) String() string            { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()               {}
func (*BidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BidRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest) GetImp() []*BidRequest_Impression {
	if m != nil {
		return m.Imp
	}
	return nil
}

func (m *BidRequest) GetSite() *BidRequest_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *BidRequest_App {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *BidRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetUser() *BidRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BidRequest) GetTest() int32 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (m *BidRequest) GetTmax() int32 {
	if m != nil {
		return m.Tmax
	}
	return 0
}

func (m *BidRequest) GetCur() []string {
	if m != nil {
		return m.Cur
	}
	return nil
}

// **** 曝光信息 ****
type BidRequest_Impression struct {
	// 曝光id
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 版位信息
	// Always   Yes, if this impression is a banner ad opportunity.
	Banner *BidRequest_Impression_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	// video object
	// Always   Yes,  if this impression is a video ad opportunity.
	Video *BidRequest_Impression_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// native object
	// Always   Yes,  if this impression is a native ad opportunity.
	Native *BidRequest_Impression_Native `protobuf:"bytes,4,opt,name=native" json:"native,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible for rendering ad (typically video or mobile).
	// Always   no
	Displaymanager string `protobuf:"bytes,5,opt,name=displaymanager" json:"displaymanager,omitempty"`
	// Version of the display manager.
	// Always   no
	Displaymanagerver string `protobuf:"bytes,6,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	// 1 = the ad is interstitial or full screen, 0 = not interstitial.
	// Always   no
	Instl int32 `protobuf:"varint,7,opt,name=instl" json:"instl,omitempty"`
	// 版位底价，单位：千次展示/元
	// Always   no
	Bidfloor float32 `protobuf:"fixed32,8,opt,name=bidfloor" json:"bidfloor,omitempty"`
	// 版位货币单位，默认为CNY(人民币) Currency specified using ISO-4217 alpha codes.
	// Always   no
	Bidfloorcur string `protobuf:"bytes,9,opt,name=bidfloorcur" json:"bidfloorcur,omitempty"`
	// Advisory as to the number of seconds that may elapse between the auction and the actual impression.
	// Always   no
	Exp int32                      `protobuf:"varint,12,opt,name=exp" json:"exp,omitempty"`
	Pmp *BidRequest_Impression_Pmp `protobuf:"bytes,10,opt,name=pmp" json:"pmp,omitempty"`
	// Ext
	// Always   no
	Ext *BidRequest_Impression_Ext `protobuf:"bytes,11,opt,name=ext" json:"ext,omitempty"`
}

func (m *BidRequest_Impression) Reset()                    { *m = BidRequest_Impression{} }
func (m *BidRequest_Impression) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Impression) ProtoMessage()               {}
func (*BidRequest_Impression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *BidRequest_Impression) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_Impression) GetBanner() *BidRequest_Impression_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *BidRequest_Impression) GetVideo() *BidRequest_Impression_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *BidRequest_Impression) GetNative() *BidRequest_Impression_Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *BidRequest_Impression) GetDisplaymanager() string {
	if m != nil {
		return m.Displaymanager
	}
	return ""
}

func (m *BidRequest_Impression) GetDisplaymanagerver() string {
	if m != nil {
		return m.Displaymanagerver
	}
	return ""
}

func (m *BidRequest_Impression) GetInstl() int32 {
	if m != nil {
		return m.Instl
	}
	return 0
}

func (m *BidRequest_Impression) GetBidfloor() float32 {
	if m != nil {
		return m.Bidfloor
	}
	return 0
}

func (m *BidRequest_Impression) GetBidfloorcur() string {
	if m != nil {
		return m.Bidfloorcur
	}
	return ""
}

func (m *BidRequest_Impression) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *BidRequest_Impression) GetPmp() *BidRequest_Impression_Pmp {
	if m != nil {
		return m.Pmp
	}
	return nil
}

func (m *BidRequest_Impression) GetExt() *BidRequest_Impression_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

// **** 版位信息 ****
// Always   yes
type BidRequest_Impression_Banner struct {
	// Array of format objects
	// Always   no
	Format []*BidRequest_Impression_Banner_Format `protobuf:"bytes,8,rep,name=format" json:"format,omitempty"`
	// 宽
	// Always   no
	W int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// 高
	// Always   no
	H int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Blocked banner ad types. Refer to OpenRTB 2.3.1 Section 5.2.
	// Always   no
	Btype []int32 `protobuf:"varint,3,rep,packed,name=btype" json:"btype,omitempty"`
	// Ad position on screen. Refer to OpenRTB 2.3.1 Section 5.4.
	// Always   no
	Pos int32 `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
	// Content MIME types supported.
	// Always   no
	Mimes []string `protobuf:"bytes,5,rep,name=mimes" json:"mimes,omitempty"`
	// List of supported API frameworks for this impression. Refer to List 5.6. If an API is not explicitly listed, it is assumed not to be supported.
	// Always   no
	Api []int32 `protobuf:"varint,6,rep,packed,name=api" json:"api,omitempty"`
	// Ext
	// Always   no
	Ext *BidRequest_Impression_Banner_Ext `protobuf:"bytes,7,opt,name=ext" json:"ext,omitempty"`
}

func (m *BidRequest_Impression_Banner) Reset()         { *m = BidRequest_Impression_Banner{} }
func (m *BidRequest_Impression_Banner) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner) ProtoMessage()    {}
func (*BidRequest_Impression_Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

func (m *BidRequest_Impression_Banner) GetFormat() []*BidRequest_Impression_Banner_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetBtype() []int32 {
	if m != nil {
		return m.Btype
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BidRequest_Impression_Banner) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetApi() []int32 {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Impression_Banner) GetExt() *BidRequest_Impression_Banner_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

type BidRequest_Impression_Banner_Format struct {
	// Width in device independent pixels (DIPS).
	// Always   no
	W int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	// Always   no
	H int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Relative width when expressing size as a ratio.
	// Always   no
	Wratio int32 `protobuf:"varint,3,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height when expressing size as a ratio.
	// Always   no
	Hratio int32 `protobuf:"varint,4,opt,name=hratio" json:"hratio,omitempty"`
	// The minimum width in device independent pixels (DIPS) at which the ad will be displayed the size is expressed as a ratio.
	// Always   no
	Wmin int32 `protobuf:"varint,5,opt,name=wmin" json:"wmin,omitempty"`
}

func (m *BidRequest_Impression_Banner_Format) Reset()         { *m = BidRequest_Impression_Banner_Format{} }
func (m *BidRequest_Impression_Banner_Format) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner_Format) ProtoMessage()    {}
func (*BidRequest_Impression_Banner_Format) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0, 0}
}

func (m *BidRequest_Impression_Banner_Format) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *BidRequest_Impression_Banner_Format) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BidRequest_Impression_Banner_Format) GetWratio() int32 {
	if m != nil {
		return m.Wratio
	}
	return 0
}

func (m *BidRequest_Impression_Banner_Format) GetHratio() int32 {
	if m != nil {
		return m.Hratio
	}
	return 0
}

func (m *BidRequest_Impression_Banner_Format) GetWmin() int32 {
	if m != nil {
		return m.Wmin
	}
	return 0
}

type BidRequest_Impression_Banner_Ext struct {
	// postion floating .
	// 1     Floating Left
	// 2     Floating Right
	// 3     Floating Top
	// 4     Floating Bottom
	// 5     Floating Top Left
	// 6     Floating Top Right
	// 7     Floating Bottom Left
	// 8     Floating Bottom Right
	// Always   no
	Pos int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
}

func (m *BidRequest_Impression_Banner_Ext) Reset()         { *m = BidRequest_Impression_Banner_Ext{} }
func (m *BidRequest_Impression_Banner_Ext) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Banner_Ext) ProtoMessage()    {}
func (*BidRequest_Impression_Banner_Ext) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0, 1}
}

func (m *BidRequest_Impression_Banner_Ext) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// ***** Video Object. *****
type BidRequest_Impression_Video struct {
	// Content MIME types supported.
	// Always   yes
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Minimum video ad duration in seconds.
	// Always   yes
	Minduration int32 `protobuf:"varint,2,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// Always   yes
	Maxduration int32 `protobuf:"varint,3,opt,name=maxduration" json:"maxduration,omitempty"`
	// Array of supported video bid response protocols. Refer to OpenRTB 2.3.1 Section 5.8.
	// Always   yes
	Protocols []int32 `protobuf:"varint,4,rep,packed,name=protocols" json:"protocols,omitempty"`
	// Width of the video player in pixels.
	// Always   yes
	W int32 `protobuf:"varint,5,opt,name=w" json:"w,omitempty"`
	// Height of the video player in pixels.
	// Always   yes
	H int32 `protobuf:"varint,6,opt,name=h" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll ad placements. OpenRTB 2.3.1 Section 5.10.
	// Always   no
	Startdelay int32 `protobuf:"varint,7,opt,name=startdelay" json:"startdelay,omitempty"`
	// Placement type for the impression. Refer to List 5.9.
	// Always   no
	Placement int32 `protobuf:"varint,11,opt,name=placement" json:"placement,omitempty"`
	// Ad position on screen. Refer to OpenRTB 2.3.1 Section 5.4.
	// Always   no
	Pos int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// List of supported API frameworks for this impression. Refer to List 5.6. If an API is not explicitly listed, it is assumed not to be supported.
	// Always   no
	Api []int32 `protobuf:"varint,9,rep,packed,name=api" json:"api,omitempty"`
	// Ext
	// Always   no
	Ext *BidRequest_Impression_Video_Ext `protobuf:"bytes,10,opt,name=ext" json:"ext,omitempty"`
}

func (m *BidRequest_Impression_Video) Reset()         { *m = BidRequest_Impression_Video{} }
func (m *BidRequest_Impression_Video) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Video) ProtoMessage()    {}
func (*BidRequest_Impression_Video) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 1}
}

func (m *BidRequest_Impression_Video) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetMinduration() int32 {
	if m != nil {
		return m.Minduration
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetMaxduration() int32 {
	if m != nil {
		return m.Maxduration
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetProtocols() []int32 {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetStartdelay() int32 {
	if m != nil {
		return m.Startdelay
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetPlacement() int32 {
	if m != nil {
		return m.Placement
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BidRequest_Impression_Video) GetApi() []int32 {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Impression_Video) GetExt() *BidRequest_Impression_Video_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

type BidRequest_Impression_Video_Ext struct {
	// postion floating .
	// 1     Floating Left
	// 2     Floating Right
	// 3     Floating Top
	// 4     Floating Bottom
	// 5     Floating Top Left
	// 6     Floating Top Right
	// 7     Floating Bottom Left
	// 8     Floating Bottom Right
	// Always   no
	Pos int32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
}

func (m *BidRequest_Impression_Video_Ext) Reset()         { *m = BidRequest_Impression_Video_Ext{} }
func (m *BidRequest_Impression_Video_Ext) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Video_Ext) ProtoMessage()    {}
func (*BidRequest_Impression_Video_Ext) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 1, 0}
}

func (m *BidRequest_Impression_Video_Ext) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// ***** Native Object. *****
type BidRequest_Impression_Native struct {
	// native JSON object. OpenRTB_Native_Ads_API_Specification_Version_1_1 4.1
	// Always   yes
	Request string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Version of the Native Markup version in use.
	// Always   no
	Ver string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	// List of supported API frameworks for this impression. Refer to List 5.6. If an API is not explicitly listed, it is assumed not to be supported.
	// Always   no
	Api []int32 `protobuf:"varint,3,rep,packed,name=api" json:"api,omitempty"`
}

func (m *BidRequest_Impression_Native) Reset()         { *m = BidRequest_Impression_Native{} }
func (m *BidRequest_Impression_Native) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Native) ProtoMessage()    {}
func (*BidRequest_Impression_Native) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 2}
}

func (m *BidRequest_Impression_Native) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *BidRequest_Impression_Native) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *BidRequest_Impression_Native) GetApi() []int32 {
	if m != nil {
		return m.Api
	}
	return nil
}

// Pmp Object
type BidRequest_Impression_Pmp struct {
	// Indicates the seats that are eligible for this auction. 0 = all bids are accepted. 1 = bids are restricted to the deals specified.
	// Always   yes
	PrivateAuction int32 `protobuf:"varint,1,opt,name=private_auction,json=privateAuction" json:"private_auction,omitempty"`
	// Array of Deal objects. These deal objects apply to this impression.
	// Always   no
	Deals []*BidRequest_Impression_Pmp_Deal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
}

func (m *BidRequest_Impression_Pmp) Reset()                    { *m = BidRequest_Impression_Pmp{} }
func (m *BidRequest_Impression_Pmp) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Pmp) ProtoMessage()               {}
func (*BidRequest_Impression_Pmp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 3} }

func (m *BidRequest_Impression_Pmp) GetPrivateAuction() int32 {
	if m != nil {
		return m.PrivateAuction
	}
	return 0
}

func (m *BidRequest_Impression_Pmp) GetDeals() []*BidRequest_Impression_Pmp_Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

// Deal Object
// Array of Deal objects. These deal objects apply to this impression.
type BidRequest_Impression_Pmp_Deal struct {
	// Unique ID for the direct deal.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Minimum bid for this impressions expressed in CPM.
	// Always   no
	Bidfloor float32 `protobuf:"fixed32,2,opt,name=bidfloor" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different from bid currency returned by bidder if this is allowed by the exchange.
	// Always   no
	Bidfloorcur string `protobuf:"bytes,3,opt,name=bidfloorcur" json:"bidfloorcur,omitempty"`
	// Optional override of the overall auction type of the bid request, where 1 = First Price, 2 = Second Price Plus, 3 = the value passed in bidfloor is the agreed upon deal price.
	// Always   no
	At int32 `protobuf:"varint,4,opt,name=at" json:"at,omitempty"`
	// Whitelist of buyer seats allowed to bid on this deal. Seat IDs must be communicated between bidders and the exchange a priori. Omission implies no seat restrictions.
	// Always   no
	Wseat []string `protobuf:"bytes,5,rep,name=wseat" json:"wseat,omitempty"`
}

func (m *BidRequest_Impression_Pmp_Deal) Reset()         { *m = BidRequest_Impression_Pmp_Deal{} }
func (m *BidRequest_Impression_Pmp_Deal) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Pmp_Deal) ProtoMessage()    {}
func (*BidRequest_Impression_Pmp_Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 3, 0}
}

func (m *BidRequest_Impression_Pmp_Deal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_Impression_Pmp_Deal) GetBidfloor() float32 {
	if m != nil {
		return m.Bidfloor
	}
	return 0
}

func (m *BidRequest_Impression_Pmp_Deal) GetBidfloorcur() string {
	if m != nil {
		return m.Bidfloorcur
	}
	return ""
}

func (m *BidRequest_Impression_Pmp_Deal) GetAt() int32 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *BidRequest_Impression_Pmp_Deal) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

type BidRequest_Impression_Ext struct {
	// Only applies to App Video or OTT Video impressions. If this impression supports preloading of the creative before serving. If preload value is 1, this impression supports preloading. If preload value is 0, this impression does not support preloading.
	// Always   no
	Preload int32 `protobuf:"varint,1,opt,name=preload" json:"preload,omitempty"`
	// Only applies to App Banner or OTT Banner impressions. If this impression supports vr creatives. If vr value is 1, this impression supports vr creatives. If vr value is 0, this impression does not support vr creatives.
	// Always   no
	Vr int32 `protobuf:"varint,2,opt,name=vr" json:"vr,omitempty"`
}

func (m *BidRequest_Impression_Ext) Reset()                    { *m = BidRequest_Impression_Ext{} }
func (m *BidRequest_Impression_Ext) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Impression_Ext) ProtoMessage()               {}
func (*BidRequest_Impression_Ext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 4} }

func (m *BidRequest_Impression_Ext) GetPreload() int32 {
	if m != nil {
		return m.Preload
	}
	return 0
}

func (m *BidRequest_Impression_Ext) GetVr() int32 {
	if m != nil {
		return m.Vr
	}
	return 0
}

// ****  Publisher 媒体相关信息
type BidRequest_Publisher struct {
	// Unique ID of this publisher.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *BidRequest_Publisher) Reset()                    { *m = BidRequest_Publisher{} }
func (m *BidRequest_Publisher) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Publisher) ProtoMessage()               {}
func (*BidRequest_Publisher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *BidRequest_Publisher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// **** 网站信息 ****
type BidRequest_Site struct {
	// 网站id
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 页面url
	// Always   no
	Page string `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	// publisher
	// Always   yes
	Publisher *BidRequest_Publisher `protobuf:"bytes,3,opt,name=publisher" json:"publisher,omitempty"`
	// Site name
	// Always   yes
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Domain of the site (e.g., “mysite.foo.com”).
	// Always   yes
	Domain string `protobuf:"bytes,5,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the site. Refer to OpenRTB 2.5 Section 5.1.
	// Always   yes
	Cat []string `protobuf:"bytes,6,rep,name=cat" json:"cat,omitempty"`
	// The referrer URL of the current page
	// Always   no
	Ref string `protobuf:"bytes,7,opt,name=ref" json:"ref,omitempty"`
}

func (m *BidRequest_Site) Reset()                    { *m = BidRequest_Site{} }
func (m *BidRequest_Site) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Site) ProtoMessage()               {}
func (*BidRequest_Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *BidRequest_Site) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_Site) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BidRequest_Site) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *BidRequest_Site) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Site) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

// APP
type BidRequest_App struct {
	// Unique ID of this app.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// App name (may be aliased at the publisher’s request).
	// Always   no
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Application bundle or package name (e.g., com.foo.mygame).
	// Always   no
	Bundle string `protobuf:"bytes,3,opt,name=bundle" json:"bundle,omitempty"`
	// Domain of the app (e.g., “mygame.foo.com”).
	// Always   no
	Domain string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	// Publisher Object.
	// Always   yes
	Publisher *BidRequest_Publisher `protobuf:"bytes,5,opt,name=publisher" json:"publisher,omitempty"`
}

func (m *BidRequest_App) Reset()                    { *m = BidRequest_App{} }
func (m *BidRequest_App) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_App) ProtoMessage()               {}
func (*BidRequest_App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *BidRequest_App) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BidRequest_App) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

func (m *BidRequest_App) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

type BidRequest_Geo struct {
	// Latitude from -90.0 to +90.0, where negative is south.
	// Always no
	Lat float32 `protobuf:"fixed32,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	// Always no
	Lon float32 `protobuf:"fixed32,2,opt,name=lon" json:"lon,omitempty"`
	// Source of location data; Refer to OpenRTB 2.5 Section 5.20.
	// Always no
	Type int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *BidRequest_Geo) Reset()                    { *m = BidRequest_Geo{} }
func (m *BidRequest_Geo) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Geo) ProtoMessage()               {}
func (*BidRequest_Geo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

func (m *BidRequest_Geo) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *BidRequest_Geo) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *BidRequest_Geo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// **** 设备信息 ****
type BidRequest_Device struct {
	// User-Agent Browser user agent string.
	// Always   no
	Ua string `protobuf:"bytes,1,opt,name=ua" json:"ua,omitempty"`
	// 用户IP地址，点分十进制字符串 IPv4 address closest to device.
	// Always   no
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// The general type of device. Refer to OpenRTB 2.3.1 Section 5.17.
	// Always no
	Devicetype int32 `protobuf:"varint,3,opt,name=devicetype" json:"devicetype,omitempty"`
	// Device os (e.g. "Android", "iOS")
	// Always no
	Os string `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	// The ratio of physical pixels to device independent pixels
	// Always no
	Pxratio float32 `protobuf:"fixed32,13,opt,name=pxratio" json:"pxratio,omitempty"`
	// Device make (e.g., “Apple”).
	// Always no
	Make string `protobuf:"bytes,14,opt,name=make" json:"make,omitempty"`
	// Device model (e.g., “iPhone”).
	// Always no
	Model string `protobuf:"bytes,15,opt,name=model" json:"model,omitempty"`
	// Device operating system version (e.g., “3.1.2”).
	// Always no
	Osv string `protobuf:"bytes,16,opt,name=osv" json:"osv,omitempty"`
	// Location of the device assumed to be the user’s current location defined by a Geo object.
	// Always no
	Geo *BidRequest_Geo `protobuf:"bytes,17,opt,name=geo" json:"geo,omitempty"`
	// Network connection type. Refer to OpenRTB 2.3.1 Section 5.18.
	// Always no
	Connectiontype int32 `protobuf:"varint,5,opt,name=connectiontype" json:"connectiontype,omitempty"`
	// Not hashed ID
	// Always   no
	Ifa string `protobuf:"bytes,6,opt,name=ifa" json:"ifa,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	// Always   no
	Didsha1 string `protobuf:"bytes,7,opt,name=didsha1" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	// Always   no
	Didmd5 string `protobuf:"bytes,8,opt,name=didmd5" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	// Always   no
	Dpidsha1 string `protobuf:"bytes,9,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	// Always   no
	Dpidmd5 string `protobuf:"bytes,10,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	// MAC address of the device; hashed via SHA1.
	// Always   no
	Macsha1 string `protobuf:"bytes,11,opt,name=macsha1" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5.
	// Always   no
	Macmd5 string `protobuf:"bytes,12,opt,name=macmd5" json:"macmd5,omitempty"`
}

func (m *BidRequest_Device) Reset()                    { *m = BidRequest_Device{} }
func (m *BidRequest_Device) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Device) ProtoMessage()               {}
func (*BidRequest_Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 5} }

func (m *BidRequest_Device) GetUa() string {
	if m != nil {
		return m.Ua
	}
	return ""
}

func (m *BidRequest_Device) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BidRequest_Device) GetDevicetype() int32 {
	if m != nil {
		return m.Devicetype
	}
	return 0
}

func (m *BidRequest_Device) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *BidRequest_Device) GetPxratio() float32 {
	if m != nil {
		return m.Pxratio
	}
	return 0
}

func (m *BidRequest_Device) GetMake() string {
	if m != nil {
		return m.Make
	}
	return ""
}

func (m *BidRequest_Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *BidRequest_Device) GetOsv() string {
	if m != nil {
		return m.Osv
	}
	return ""
}

func (m *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_Device) GetConnectiontype() int32 {
	if m != nil {
		return m.Connectiontype
	}
	return 0
}

func (m *BidRequest_Device) GetIfa() string {
	if m != nil {
		return m.Ifa
	}
	return ""
}

func (m *BidRequest_Device) GetDidsha1() string {
	if m != nil {
		return m.Didsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDidmd5() string {
	if m != nil {
		return m.Didmd5
	}
	return ""
}

func (m *BidRequest_Device) GetDpidsha1() string {
	if m != nil {
		return m.Dpidsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDpidmd5() string {
	if m != nil {
		return m.Dpidmd5
	}
	return ""
}

func (m *BidRequest_Device) GetMacsha1() string {
	if m != nil {
		return m.Macsha1
	}
	return ""
}

func (m *BidRequest_Device) GetMacmd5() string {
	if m != nil {
		return m.Macmd5
	}
	return ""
}

type BidRequest_Segment struct {
	// ID of the data segment specific to the data provider.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name of the data segment specific to the data provider.
	// Always   yes
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// String representation of the data segment value. This value ranges from 0.0 to 1.0; with 1.0 being the most relevant.
	// Always   yes
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *BidRequest_Segment) Reset()                    { *m = BidRequest_Segment{} }
func (m *BidRequest_Segment) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Segment) ProtoMessage()               {}
func (*BidRequest_Segment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 6} }

func (m *BidRequest_Segment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_Segment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BidRequest_Segment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BidRequest_Data struct {
	// Unique ID of this data provider on this exchange.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name of this data provider on this exchange.
	// Always   yes
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of Segment objects that contain the actual data values.
	// Always   yes
	Segment []*BidRequest_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
}

func (m *BidRequest_Data) Reset()                    { *m = BidRequest_Data{} }
func (m *BidRequest_Data) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_Data) ProtoMessage()               {}
func (*BidRequest_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 7} }

func (m *BidRequest_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BidRequest_Data) GetSegment() []*BidRequest_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

// **** 用户信息 ****
type BidRequest_User struct {
	// 用户ID Unique ID of this user on the exchange.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by iClick for the buyer
	// Always   no
	Buyeruid string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	// Additional user data. Each Data object represents a different data source.
	// Always   no
	Data []*BidRequest_Data `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *BidRequest_User) Reset()                    { *m = BidRequest_User{} }
func (m *BidRequest_User) String() string            { return proto.CompactTextString(m) }
func (*BidRequest_User) ProtoMessage()               {}
func (*BidRequest_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 8} }

func (m *BidRequest_User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidRequest_User) GetBuyeruid() string {
	if m != nil {
		return m.Buyeruid
	}
	return ""
}

func (m *BidRequest_User) GetData() []*BidRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type BidResponse struct {
	// 返回ID，请将请求中的id赋值给返回id。 ID of the bid request to which this is a response.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 返回的广告信息
	// Always   yes
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	// Always   no
	Bidid string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	// 竞价货币类型, 默认为人民币(CNY) Bid currency using ISO-4217 alpha codes. default CNY
	// Always   no
	Cur string `protobuf:"bytes,4,opt,name=cur" json:"cur,omitempty"`
}

func (m *BidResponse) Reset()                    { *m = BidResponse{} }
func (m *BidResponse) String() string            { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()               {}
func (*BidResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BidResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetBidid() string {
	if m != nil {
		return m.Bidid
	}
	return ""
}

func (m *BidResponse) GetCur() string {
	if m != nil {
		return m.Cur
	}
	return ""
}

// **** seatbid ****
type BidResponse_SeatBid struct {
	// 返回的竞价广告
	// Always   yes
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	// ID of the bidder seat on whose behalf this bid is made。竟价的 seat. 如 代表多个dsp出价...
	// Always   no
	Seat string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
}

func (m *BidResponse_SeatBid) Reset()                    { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()               {}
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *BidResponse_SeatBid) GetSeat() string {
	if m != nil {
		return m.Seat
	}
	return ""
}

// **** 竞价广告信息 ****
type BidResponse_SeatBid_Bid struct {
	// Bidder generated bid ID to assist with logging/tracking.
	// Always   yes
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 竞价的曝光id,ID of the Impression Object in the related bid request.
	// Always   yes
	Impid string `protobuf:"bytes,2,opt,name=impid" json:"impid,omitempty"`
	// 竞价，cpm 单位：千次展示/元
	// Always   yes
	Price float32 `protobuf:"fixed32,3,opt,name=price" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins. 比如预审广告，投放时只返回该Adid
	// Always   no
	Adid string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	// winner通知url
	// Always   no
	Nurl string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	// Ad markup in case the bid wins.
	// Always   yes
	Adm string `protobuf:"bytes,6,opt,name=adm" json:"adm,omitempty"`
	// 广告主 domain。 Advertiser domain for block list checking and ad quality/safety checking (e.g., 'ford.com'). Only one domain is allowed.
	// Always   yes
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// 广告纯内容的url。 URL without cache-busting to an image that is representative of the content of the campaign for ad quality/safety checking.
	// Always   yes
	Iurl string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	// campaign id
	// Always   no
	Cid string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	// creative id
	// Always   yes
	Crid string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// Reference to the deal.id from the bid request if this bid pertains to a private marketplace direct deal.
	// Always   no
	Dealid string `protobuf:"bytes,11,opt,name=dealid" json:"dealid,omitempty"`
	// 物料尺寸 - 高度。需与请求中的尺寸一致
	// Always   no
	H int32 `protobuf:"varint,12,opt,name=h" json:"h,omitempty"`
	// 物料尺寸 - 宽度。需与请求中的尺寸一致
	// Always   no
	W int32 `protobuf:"varint,13,opt,name=w" json:"w,omitempty"`
	// Relative height of the creative when expressing size as a ratio. Required for Flex Ads.
	// Always   no
	Hratio int32 `protobuf:"varint,16,opt,name=hratio" json:"hratio,omitempty"`
	// Relative width of the creative when expressing size as a ratio. Required for Flex Ads.
	// Always   no
	Wratio int32 `protobuf:"varint,17,opt,name=wratio" json:"wratio,omitempty"`
	// Advisory as to the number of seconds the bidder is willing to wait between the auction and the actual impression.
	// Always   no
	Exp int32 `protobuf:"varint,18,opt,name=exp" json:"exp,omitempty"`
	// API required by the markup if applicable. Refer to List 5.6.
	// Always   no
	Api int32 `protobuf:"varint,19,opt,name=api" json:"api,omitempty"`
	// Video response protocol of the markup if applicable. Refer to List 5.8.
	// Always   no
	Protocol int32 `protobuf:"varint,20,opt,name=protocol" json:"protocol,omitempty"`
	// IAB content categories of the creative as defined in OpenRTB.  Refer to List 5.1
	// Always   no
	Cat []string `protobuf:"bytes,14,rep,name=cat" json:"cat,omitempty"`
	// Ext
	// Always   no
	Ext *BidResponse_SeatBid_Bid_Ext `protobuf:"bytes,15,opt,name=ext" json:"ext,omitempty"`
}

func (m *BidResponse_SeatBid_Bid) Reset()                    { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string            { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()               {}
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

func (m *BidResponse_SeatBid_Bid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetImpid() string {
	if m != nil {
		return m.Impid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetAdid() string {
	if m != nil {
		return m.Adid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetNurl() string {
	if m != nil {
		return m.Nurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdm() string {
	if m != nil {
		return m.Adm
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if m != nil {
		return m.Adomain
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetIurl() string {
	if m != nil {
		return m.Iurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCrid() string {
	if m != nil {
		return m.Crid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetDealid() string {
	if m != nil {
		return m.Dealid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetHratio() int32 {
	if m != nil {
		return m.Hratio
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetWratio() int32 {
	if m != nil {
		return m.Wratio
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetApi() int32 {
	if m != nil {
		return m.Api
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetExt() *BidResponse_SeatBid_Bid_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

type BidResponse_SeatBid_Bid_Ext struct {
	// Only applies to App Video or OTT Video impressions. If this impression supports preloading of the creative before serving. If preload value is 1, this impression supports preloading. If preload value is 0, this impression does not support preloading.
	// Always   no
	Preload int32 `protobuf:"varint,1,opt,name=preload" json:"preload,omitempty"`
	// Only applies to App Banner or OTT Banner impressions. If this impression supports vr creatives. If vr value is 1, this impression supports vr creatives. If vr value is 0, this impression does not support vr creatives.
	// Always   no
	Vr int32 `protobuf:"varint,2,opt,name=vr" json:"vr,omitempty"`
}

func (m *BidResponse_SeatBid_Bid_Ext) Reset()         { *m = BidResponse_SeatBid_Bid_Ext{} }
func (m *BidResponse_SeatBid_Bid_Ext) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid_Ext) ProtoMessage()    {}
func (*BidResponse_SeatBid_Bid_Ext) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 0, 0}
}

func (m *BidResponse_SeatBid_Bid_Ext) GetPreload() int32 {
	if m != nil {
		return m.Preload
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid_Ext) GetVr() int32 {
	if m != nil {
		return m.Vr
	}
	return 0
}

func init() {
	proto.RegisterType((*BidRequest)(nil), "iax.BidRequest")
	proto.RegisterType((*BidRequest_Impression)(nil), "iax.BidRequest.Impression")
	proto.RegisterType((*BidRequest_Impression_Banner)(nil), "iax.BidRequest.Impression.Banner")
	proto.RegisterType((*BidRequest_Impression_Banner_Format)(nil), "iax.BidRequest.Impression.Banner.Format")
	proto.RegisterType((*BidRequest_Impression_Banner_Ext)(nil), "iax.BidRequest.Impression.Banner.Ext")
	proto.RegisterType((*BidRequest_Impression_Video)(nil), "iax.BidRequest.Impression.Video")
	proto.RegisterType((*BidRequest_Impression_Video_Ext)(nil), "iax.BidRequest.Impression.Video.Ext")
	proto.RegisterType((*BidRequest_Impression_Native)(nil), "iax.BidRequest.Impression.Native")
	proto.RegisterType((*BidRequest_Impression_Pmp)(nil), "iax.BidRequest.Impression.Pmp")
	proto.RegisterType((*BidRequest_Impression_Pmp_Deal)(nil), "iax.BidRequest.Impression.Pmp.Deal")
	proto.RegisterType((*BidRequest_Impression_Ext)(nil), "iax.BidRequest.Impression.Ext")
	proto.RegisterType((*BidRequest_Publisher)(nil), "iax.BidRequest.Publisher")
	proto.RegisterType((*BidRequest_Site)(nil), "iax.BidRequest.Site")
	proto.RegisterType((*BidRequest_App)(nil), "iax.BidRequest.App")
	proto.RegisterType((*BidRequest_Geo)(nil), "iax.BidRequest.Geo")
	proto.RegisterType((*BidRequest_Device)(nil), "iax.BidRequest.Device")
	proto.RegisterType((*BidRequest_Segment)(nil), "iax.BidRequest.Segment")
	proto.RegisterType((*BidRequest_Data)(nil), "iax.BidRequest.Data")
	proto.RegisterType((*BidRequest_User)(nil), "iax.BidRequest.User")
	proto.RegisterType((*BidResponse)(nil), "iax.BidResponse")
	proto.RegisterType((*BidResponse_SeatBid)(nil), "iax.BidResponse.SeatBid")
	proto.RegisterType((*BidResponse_SeatBid_Bid)(nil), "iax.BidResponse.SeatBid.Bid")
	proto.RegisterType((*BidResponse_SeatBid_Bid_Ext)(nil), "iax.BidResponse.SeatBid.Bid.Ext")
}

func init() { proto.RegisterFile("iax.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x17, 0xcb, 0x8e, 0xdb, 0x64,
	0x57, 0x89, 0x63, 0xa7, 0xf9, 0x32, 0x9d, 0xb6, 0x6e, 0xd5, 0xfa, 0xf7, 0x5f, 0x55, 0x43, 0xa1,
	0x30, 0x0b, 0x14, 0xe8, 0x20, 0x8a, 0x58, 0x20, 0xd1, 0x02, 0x45, 0x6c, 0x50, 0xf5, 0x55, 0xb0,
	0x02, 0xa1, 0x2f, 0xf1, 0x37, 0x8d, 0x85, 0x6f, 0xf8, 0x92, 0xc9, 0xf0, 0x16, 0xb0, 0xe2, 0x15,
	0x58, 0x23, 0xb1, 0xe0, 0x21, 0x78, 0x0b, 0x36, 0x2c, 0x79, 0x02, 0xce, 0xcd, 0x71, 0x2e, 0x73,
	0x63, 0x77, 0xce, 0xf1, 0xb9, 0xdf, 0xbe, 0x63, 0x35, 0x8a, 0xcd, 0x72, 0x52, 0x94, 0x79, 0x9d,
	0xfb, 0x0e, 0x80, 0x0f, 0x7f, 0xb9, 0xa7, 0xd4, 0xb3, 0x38, 0xd2, 0xf6, 0x87, 0xc6, 0x56, 0xb5,
	0xbf, 0xaf, 0xfa, 0x71, 0x14, 0xf4, 0x0e, 0x7a, 0x87, 0x23, 0x0d, 0x90, 0xff, 0xb6, 0x72, 0xe2,
	0xb4, 0x08, 0xfa, 0x07, 0xce, 0xe1, 0xf8, 0x28, 0x9c, 0xa0, 0x70, 0xc7, 0x3d, 0xf9, 0x22, 0x2d,
	0x4a, 0x5b, 0x55, 0x71, 0x9e, 0x69, 0x64, 0xf3, 0x0f, 0xd5, 0xa0, 0x8a, 0x6b, 0x1b, 0x38, 0x20,
	0x3f, 0x3e, 0xba, 0xb3, 0xcd, 0xfe, 0x12, 0xbe, 0x69, 0xe2, 0xf0, 0x1f, 0x29, 0xc7, 0x14, 0x45,
	0x30, 0x20, 0xc6, 0xdb, 0xdb, 0x8c, 0x4f, 0x8b, 0x42, 0xe3, 0x77, 0x7f, 0xa2, 0xbc, 0xc8, 0x2e,
	0xe2, 0x99, 0x0d, 0x5c, 0xe2, 0xbc, 0xbb, 0xcd, 0xf9, 0x29, 0x7d, 0xd5, 0xc2, 0x85, 0x0e, 0x34,
	0x95, 0x2d, 0x03, 0xef, 0x6c, 0x07, 0xbe, 0x82, 0x6f, 0x9a, 0x38, 0x7c, 0x5f, 0x0d, 0x6a, 0x20,
	0x05, 0x43, 0xe0, 0x74, 0x35, 0xc1, 0x44, 0x4b, 0xcd, 0x32, 0xb8, 0x26, 0x34, 0x80, 0xfd, 0x9b,
	0xca, 0x99, 0x35, 0x65, 0x30, 0x82, 0x04, 0x8c, 0x34, 0x82, 0xe1, 0x4f, 0x7b, 0x4a, 0x75, 0x81,
	0xef, 0x64, 0xec, 0x43, 0xe5, 0x4d, 0x4d, 0x96, 0x81, 0x13, 0x7d, 0x72, 0xe2, 0xb5, 0xf3, 0x93,
	0x36, 0x79, 0x46, 0x8c, 0x5a, 0x04, 0xfc, 0x27, 0xca, 0x5d, 0xc4, 0x91, 0xcd, 0x25, 0x7f, 0x07,
	0x17, 0x48, 0x7e, 0x8d, 0x7c, 0x9a, 0xd9, 0xd1, 0x64, 0x66, 0xea, 0x78, 0x61, 0x25, 0x9f, 0x17,
	0x99, 0xfc, 0x92, 0x18, 0xb5, 0x08, 0xf8, 0x6f, 0xaa, 0xfd, 0x28, 0xae, 0x8a, 0xc4, 0x9c, 0xa6,
	0x26, 0x33, 0xaf, 0xc0, 0x6b, 0x97, 0x22, 0xd9, 0xa2, 0x42, 0x1f, 0xdc, 0xda, 0xa4, 0x2c, 0x24,
	0xcb, 0x23, 0xbd, 0xfb, 0xc1, 0xbf, 0xa3, 0xdc, 0x38, 0xab, 0xea, 0x44, 0xb2, 0xcb, 0x88, 0x1f,
	0xaa, 0x6b, 0xd3, 0x38, 0x3a, 0x4e, 0xf2, 0xbc, 0xa4, 0x14, 0xf7, 0xf5, 0x0a, 0xf7, 0x0f, 0xd4,
	0xb8, 0x85, 0x39, 0xdd, 0xa8, 0x79, 0x9d, 0x84, 0x85, 0xb0, 0xcb, 0x22, 0xd8, 0x23, 0x8d, 0x08,
	0xfa, 0xef, 0x2a, 0xa7, 0x80, 0xde, 0x54, 0x14, 0xf3, 0x83, 0x0b, 0x62, 0x7e, 0x91, 0x42, 0x3b,
	0x01, 0x2b, 0x4a, 0xd8, 0x65, 0x1d, 0x8c, 0x2f, 0x95, 0xf8, 0x6c, 0x59, 0xa3, 0x8d, 0x3a, 0xfc,
	0xa7, 0xaf, 0x3c, 0xae, 0x92, 0xff, 0xb1, 0xf2, 0x8e, 0xf3, 0x32, 0x35, 0x35, 0x38, 0x8f, 0xd3,
	0x70, 0x78, 0x69, 0x61, 0x27, 0xcf, 0x89, 0x5f, 0x8b, 0x9c, 0xbf, 0xa7, 0x7a, 0x27, 0xd4, 0x29,
	0xae, 0xee, 0x9d, 0x20, 0x36, 0xa7, 0x1e, 0x01, 0x6c, 0x8e, 0x29, 0x9b, 0xd6, 0xa7, 0x05, 0xce,
	0x8e, 0x83, 0x29, 0x23, 0x04, 0x83, 0x2e, 0xf2, 0x8a, 0xca, 0x0a, 0x41, 0x03, 0x88, 0x7c, 0x69,
	0x9c, 0xda, 0x0a, 0xea, 0x84, 0x1d, 0xc9, 0x08, 0xf2, 0x99, 0x22, 0x86, 0x82, 0xa0, 0x2c, 0x82,
	0xfe, 0x07, 0x1c, 0xea, 0x90, 0x42, 0x7d, 0x74, 0xb9, 0xab, 0xab, 0x88, 0xe7, 0xca, 0x7b, 0x7e,
	0xb9, 0xbb, 0x77, 0x95, 0x77, 0x52, 0x42, 0x0b, 0x71, 0xaf, 0xba, 0x5a, 0x30, 0xa4, 0xcf, 0x99,
	0xce, 0x3e, 0x0b, 0x86, 0xa3, 0x75, 0x92, 0xc6, 0x19, 0x75, 0x17, 0x8c, 0x16, 0xc2, 0xe1, 0x3d,
	0xe5, 0x80, 0xd5, 0x36, 0xc6, 0xde, 0x2a, 0xc6, 0xf0, 0xcf, 0xbe, 0x72, 0xa9, 0xc1, 0xbb, 0x68,
	0x7b, 0xeb, 0xd1, 0x42, 0xb3, 0x80, 0x7c, 0xd4, 0x90, 0xea, 0x4c, 0x9c, 0x5a, 0x27, 0x11, 0x87,
	0x59, 0xae, 0x38, 0x1c, 0xe1, 0xe8, 0x48, 0xfe, 0x7d, 0x35, 0xa2, 0x2d, 0x38, 0xcb, 0x13, 0xcc,
	0x2f, 0xe6, 0xad, 0x23, 0x70, 0xe8, 0xee, 0x46, 0xe8, 0x5e, 0x1b, 0xfa, 0x03, 0xa5, 0xaa, 0xda,
	0x94, 0x75, 0x64, 0xa1, 0xe9, 0xa5, 0xc3, 0xd7, 0x28, 0xa4, 0x39, 0x31, 0x33, 0x9b, 0xda, 0x8c,
	0x5b, 0x0d, 0x35, 0xb7, 0x84, 0x36, 0xda, 0x6b, 0x5d, 0x45, 0xa5, 0x76, 0xa3, 0xae, 0x76, 0x4f,
	0xb8, 0x76, 0xdc, 0xd8, 0x6f, 0x5c, 0xb6, 0x05, 0xba, 0xd2, 0x9d, 0x9b, 0xd0, 0xe7, 0xca, 0xe3,
	0xb9, 0xf7, 0x03, 0x35, 0x2c, 0x59, 0x8f, 0xac, 0xac, 0x16, 0x45, 0xa9, 0x85, 0x2c, 0x2d, 0x58,
	0x74, 0x38, 0xc5, 0xe2, 0x98, 0xb3, 0x72, 0x2c, 0xfc, 0xab, 0xa7, 0x1c, 0x18, 0x26, 0xff, 0x2d,
	0x75, 0xa3, 0x28, 0xe3, 0x85, 0xa9, 0xed, 0x77, 0xa6, 0x99, 0x51, 0x8a, 0xd9, 0xda, 0xbe, 0x90,
	0x9f, 0x32, 0x15, 0x36, 0x93, 0x1b, 0x59, 0x03, 0x19, 0xe6, 0x07, 0xe4, 0xf5, 0x8b, 0x87, 0x14,
	0xb6, 0xb9, 0x49, 0x34, 0x4b, 0x84, 0x3f, 0xaa, 0x01, 0xa2, 0x3b, 0xfb, 0x75, 0x7d, 0x8b, 0xf4,
	0x2f, 0xde, 0x22, 0xce, 0xee, 0x16, 0x01, 0x6d, 0x30, 0xc0, 0xdc, 0x9b, 0x00, 0x61, 0x83, 0x9d,
	0x54, 0x16, 0x48, 0x32, 0x4e, 0x84, 0x84, 0xef, 0x70, 0x22, 0x21, 0x59, 0xe0, 0x5e, 0x92, 0x9b,
	0x48, 0xc2, 0x6b, 0x51, 0x54, 0xb3, 0x28, 0xa5, 0xf1, 0x00, 0x0a, 0xff, 0xaf, 0x46, 0x2f, 0x9a,
	0x69, 0x12, 0x57, 0x73, 0x5b, 0x6e, 0x7b, 0x1c, 0xfe, 0xd6, 0x53, 0x03, 0x7c, 0xfa, 0x76, 0x42,
	0x81, 0xa1, 0x28, 0x60, 0x65, 0x4a, 0xce, 0x09, 0x86, 0xb9, 0x1d, 0x15, 0xad, 0x26, 0x79, 0x07,
	0xfe, 0xb7, 0x9d, 0xb5, 0x95, 0x29, 0xdd, 0xf1, 0xa2, 0xb2, 0xcc, 0xa4, 0xfc, 0x04, 0x80, 0x32,
	0x84, 0x71, 0x1a, 0xa3, 0x3c, 0x35, 0x32, 0x77, 0x23, 0x2d, 0x18, 0x3d, 0x6a, 0x10, 0xb3, 0x27,
	0x8f, 0x9a, 0xa1, 0xea, 0x97, 0xf6, 0x98, 0xba, 0x19, 0x28, 0x00, 0x86, 0x3f, 0x43, 0xad, 0xe1,
	0x1d, 0x3e, 0xcb, 0x69, 0xb2, 0xd3, 0xdf, 0xb4, 0x33, 0x6d, 0xb2, 0x28, 0xb1, 0x92, 0x72, 0xc1,
	0xd6, 0xec, 0x0f, 0x36, 0xec, 0x6f, 0x04, 0xe9, 0x5e, 0x3d, 0xc8, 0xf0, 0x23, 0xe5, 0x7c, 0x0e,
	0x6b, 0x01, 0xbc, 0x4d, 0x0c, 0x77, 0x70, 0x5f, 0x23, 0x48, 0x14, 0x59, 0x05, 0x48, 0x81, 0xd6,
	0xc3, 0xc7, 0x9c, 0xf7, 0x29, 0x3f, 0xe6, 0x00, 0x87, 0xbf, 0x3a, 0xca, 0xe3, 0x8b, 0x01, 0xc3,
	0x6a, 0x4c, 0x1b, 0x56, 0x63, 0x28, 0xcc, 0x42, 0x82, 0x02, 0x08, 0xa7, 0x9c, 0x6f, 0x8a, 0x35,
	0x25, 0x6b, 0x14, 0xe4, 0x97, 0xc5, 0x0c, 0xfc, 0x30, 0xc5, 0xd8, 0x2b, 0x4b, 0xde, 0x7c, 0xd7,
	0xc9, 0x89, 0x16, 0x45, 0x47, 0x52, 0xf3, 0xbd, 0x0d, 0xf6, 0x39, 0x61, 0x08, 0xd3, 0x5e, 0xcb,
	0x61, 0x5d, 0x04, 0x37, 0x88, 0xc8, 0x08, 0x06, 0x91, 0x57, 0x8b, 0xe0, 0x26, 0x17, 0x01, 0x40,
	0x3c, 0x93, 0x5e, 0xc1, 0x3d, 0x70, 0xeb, 0xec, 0x33, 0x09, 0x52, 0xa1, 0xf1, 0x3b, 0xbe, 0xe2,
	0xb3, 0x1c, 0xd6, 0x38, 0x0d, 0x1d, 0x39, 0xcc, 0xbb, 0x6b, 0x8b, 0x8a, 0x06, 0xe2, 0x63, 0x23,
	0xef, 0x36, 0x82, 0xe8, 0x76, 0x14, 0x47, 0xd5, 0xdc, 0x3c, 0x96, 0xda, 0xb7, 0x28, 0xd5, 0x2e,
	0x8e, 0xd2, 0xe8, 0x7d, 0xda, 0x55, 0x58, 0x3b, 0xc2, 0x70, 0xfe, 0xa2, 0x42, 0x44, 0xf8, 0x99,
	0x5e, 0xe1, 0xa4, 0xad, 0x60, 0x21, 0x25, 0xda, 0x18, 0xc5, 0x2f, 0xa9, 0x99, 0x91, 0xd0, 0x98,
	0xbf, 0x08, 0x8a, 0x76, 0x00, 0x44, 0x91, 0x3d, 0xb6, 0xc3, 0x58, 0xf8, 0x89, 0x1a, 0xbe, 0xb4,
	0xaf, 0x68, 0x67, 0x5e, 0xa5, 0x05, 0x21, 0xa3, 0x0b, 0x93, 0x34, 0x6d, 0x07, 0x32, 0x12, 0x7e,
	0x0b, 0x4b, 0xc4, 0xd4, 0xe6, 0x4a, 0x1a, 0x1e, 0xab, 0x61, 0xc5, 0x06, 0x69, 0xe5, 0x8d, 0x8f,
	0xee, 0xed, 0xdc, 0xaf, 0xfc, 0x59, 0xb7, 0x7c, 0xe1, 0x37, 0x6a, 0x80, 0x27, 0xe5, 0x99, 0x3b,
	0xaa, 0x39, 0xb5, 0x65, 0x03, 0x54, 0x36, 0xb1, 0xc2, 0xf1, 0x44, 0x8d, 0xc0, 0x25, 0xb1, 0xb1,
	0x73, 0xa2, 0xa2, 0xbb, 0x9a, 0x38, 0x1e, 0xfe, 0xee, 0xaa, 0x31, 0x7d, 0xa9, 0x8a, 0x3c, 0xab,
	0x76, 0xd7, 0xc7, 0x11, 0x3a, 0x6c, 0xea, 0x29, 0x19, 0x41, 0x65, 0x41, 0xa7, 0x8c, 0x45, 0xc0,
	0x63, 0x53, 0x23, 0xde, 0x32, 0xd2, 0x99, 0x11, 0x43, 0x25, 0xdb, 0x34, 0x11, 0xd2, 0x1e, 0xb9,
	0xdc, 0xcd, 0x74, 0xe4, 0xfe, 0x31, 0xc0, 0xf4, 0x93, 0x30, 0x1c, 0xe1, 0xce, 0x94, 0x0c, 0xa3,
	0x8d, 0xfb, 0xe7, 0xd9, 0x20, 0x1a, 0x32, 0x62, 0x72, 0x69, 0xa5, 0x4a, 0x72, 0x69, 0xa3, 0xfe,
	0xed, 0x28, 0x07, 0x75, 0x6d, 0xc7, 0x80, 0x97, 0x62, 0x5a, 0xac, 0xd2, 0xc4, 0x08, 0x52, 0xe1,
	0x21, 0x99, 0x71, 0x31, 0xfb, 0x9a, 0x11, 0xd4, 0x6b, 0xd0, 0x75, 0xd9, 0x70, 0x08, 0x53, 0x21,
	0x9b, 0x32, 0x91, 0xfd, 0x46, 0x30, 0xbd, 0x5b, 0x51, 0xda, 0x76, 0x39, 0x80, 0xd8, 0x7d, 0x46,
	0x16, 0xd1, 0x90, 0x76, 0x5e, 0x8b, 0xa2, 0x7c, 0x8c, 0xf2, 0xdc, 0xe3, 0x04, 0x53, 0x36, 0xc0,
	0xcc, 0x48, 0xb2, 0xc1, 0x56, 0x66, 0x25, 0x90, 0xb8, 0xa9, 0x09, 0xa6, 0xf9, 0x80, 0xf7, 0x09,
	0xa8, 0x63, 0x99, 0x0f, 0xc2, 0xf8, 0x58, 0xd8, 0x6b, 0x8f, 0x05, 0x3a, 0x24, 0xae, 0xb7, 0x87,
	0x44, 0x77, 0x1d, 0xdd, 0xdc, 0xb8, 0x8e, 0xba, 0x6b, 0xea, 0xd6, 0xc6, 0x35, 0x25, 0x37, 0xaf,
	0xdf, 0xdd, 0xbc, 0xf2, 0x26, 0xdf, 0x66, 0x0a, 0x1e, 0x0b, 0xd0, 0x6b, 0xed, 0xdd, 0x12, 0xdc,
	0x21, 0xf2, 0x0a, 0x6f, 0xf7, 0xfc, 0x7e, 0xb7, 0xe7, 0x8f, 0xf8, 0xb4, 0xb8, 0xb1, 0xfd, 0x83,
	0xb1, 0x5b, 0xcb, 0xee, 0xac, 0xf8, 0xaf, 0xaf, 0xe1, 0xd4, 0x23, 0x07, 0xde, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x82, 0x1f, 0x10, 0x7f, 0x6c, 0x0e, 0x00, 0x00,
}

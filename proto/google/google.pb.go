// Code generated by protoc-gen-go.
// source: google.proto
// DO NOT EDIT!

/*
Package google is a generated protocol buffer package.

It is generated from these files:
	google.proto

It has these top-level messages:
	BidRequest
	BidResponse
*/
package google

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The type of mobile device in which the ad will be shown.
type BidRequest_Mobile_MobileDevType int32

const (
	BidRequest_Mobile_UNKNOWN       BidRequest_Mobile_MobileDevType = 0
	BidRequest_Mobile_HIGHEND_PHONE BidRequest_Mobile_MobileDevType = 1
	BidRequest_Mobile_TABLET        BidRequest_Mobile_MobileDevType = 2
)

var BidRequest_Mobile_MobileDevType_name = map[int32]string{
	0: "UNKNOWN",
	1: "HIGHEND_PHONE",
	2: "TABLET",
}
var BidRequest_Mobile_MobileDevType_value = map[string]int32{
	"UNKNOWN":       0,
	"HIGHEND_PHONE": 1,
	"TABLET":        2,
}

func (x BidRequest_Mobile_MobileDevType) Enum() *BidRequest_Mobile_MobileDevType {
	p := new(BidRequest_Mobile_MobileDevType)
	*p = x
	return p
}
func (x BidRequest_Mobile_MobileDevType) String() string {
	return proto.EnumName(BidRequest_Mobile_MobileDevType_name, int32(x))
}
func (x *BidRequest_Mobile_MobileDevType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Mobile_MobileDevType_value, data, "BidRequest_Mobile_MobileDevType")
	if err != nil {
		return err
	}
	*x = BidRequest_Mobile_MobileDevType(value)
	return nil
}

// The screen orientation of the device when the ad request is sent.
type BidRequest_Mobile_ScreenOrientation int32

const (
	BidRequest_Mobile_SCREEN_ORIENTATION_UNKNOWN   BidRequest_Mobile_ScreenOrientation = 0
	BidRequest_Mobile_SCREEN_ORIENTATION_PORTRAIT  BidRequest_Mobile_ScreenOrientation = 1
	BidRequest_Mobile_SCREEN_ORIENTATION_LANDSCAPE BidRequest_Mobile_ScreenOrientation = 2
)

var BidRequest_Mobile_ScreenOrientation_name = map[int32]string{
	0: "SCREEN_ORIENTATION_UNKNOWN",
	1: "SCREEN_ORIENTATION_PORTRAIT",
	2: "SCREEN_ORIENTATION_LANDSCAPE",
}
var BidRequest_Mobile_ScreenOrientation_value = map[string]int32{
	"SCREEN_ORIENTATION_UNKNOWN":   0,
	"SCREEN_ORIENTATION_PORTRAIT":  1,
	"SCREEN_ORIENTATION_LANDSCAPE": 2,
}

func (x BidRequest_Mobile_ScreenOrientation) Enum() *BidRequest_Mobile_ScreenOrientation {
	p := new(BidRequest_Mobile_ScreenOrientation)
	*p = x
	return p
}
func (x BidRequest_Mobile_ScreenOrientation) String() string {
	return proto.EnumName(BidRequest_Mobile_ScreenOrientation_name, int32(x))
}
func (x *BidRequest_Mobile_ScreenOrientation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Mobile_ScreenOrientation_value, data, "BidRequest_Mobile_ScreenOrientation")
	if err != nil {
		return err
	}
	*x = BidRequest_Mobile_ScreenOrientation(value)
	return nil
}

// The type of inventory from which request is sent.
type BidRequest_Video_InventoryType int32

const (
	BidRequest_Video_WEB_VIDEO           BidRequest_Video_InventoryType = 0
	BidRequest_Video_GAMES               BidRequest_Video_InventoryType = 1
	BidRequest_Video_MOBILE_INTERSTITIAL BidRequest_Video_InventoryType = 2
)

var BidRequest_Video_InventoryType_name = map[int32]string{
	0: "WEB_VIDEO",
	1: "GAMES",
	2: "MOBILE_INTERSTITIAL",
}
var BidRequest_Video_InventoryType_value = map[string]int32{
	"WEB_VIDEO":           0,
	"GAMES":               1,
	"MOBILE_INTERSTITIAL": 2,
}

func (x BidRequest_Video_InventoryType) Enum() *BidRequest_Video_InventoryType {
	p := new(BidRequest_Video_InventoryType)
	*p = x
	return p
}
func (x BidRequest_Video_InventoryType) String() string {
	return proto.EnumName(BidRequest_Video_InventoryType_name, int32(x))
}
func (x *BidRequest_Video_InventoryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Video_InventoryType_value, data, "BidRequest_Video_InventoryType")
	if err != nil {
		return err
	}
	*x = BidRequest_Video_InventoryType(value)
	return nil
}

// Does the publisher allow/require/block skippable video ads?
type BidRequest_Video_SkippableBidRequestType int32

const (
	BidRequest_Video_ALLOW_SKIPPABLE   BidRequest_Video_SkippableBidRequestType = 0
	BidRequest_Video_REQUIRE_SKIPPABLE BidRequest_Video_SkippableBidRequestType = 1
	BidRequest_Video_BLOCK_SKIPPABLE   BidRequest_Video_SkippableBidRequestType = 2
)

var BidRequest_Video_SkippableBidRequestType_name = map[int32]string{
	0: "ALLOW_SKIPPABLE",
	1: "REQUIRE_SKIPPABLE",
	2: "BLOCK_SKIPPABLE",
}
var BidRequest_Video_SkippableBidRequestType_value = map[string]int32{
	"ALLOW_SKIPPABLE":   0,
	"REQUIRE_SKIPPABLE": 1,
	"BLOCK_SKIPPABLE":   2,
}

func (x BidRequest_Video_SkippableBidRequestType) Enum() *BidRequest_Video_SkippableBidRequestType {
	p := new(BidRequest_Video_SkippableBidRequestType)
	*p = x
	return p
}
func (x BidRequest_Video_SkippableBidRequestType) String() string {
	return proto.EnumName(BidRequest_Video_SkippableBidRequestType_name, int32(x))
}
func (x *BidRequest_Video_SkippableBidRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Video_SkippableBidRequestType_value, data, "BidRequest_Video_SkippableBidRequestType")
	if err != nil {
		return err
	}
	*x = BidRequest_Video_SkippableBidRequestType(value)
	return nil
}

// The video technologies that are allowed for this request.  The response
// should support at least one of them.
type BidRequest_Video_GVideoFormat int32

const (
	BidRequest_Video_VIDEO_FLASH BidRequest_Video_GVideoFormat = 0
	BidRequest_Video_VIDEO_HTML5 BidRequest_Video_GVideoFormat = 1
)

var BidRequest_Video_GVideoFormat_name = map[int32]string{
	0: "VIDEO_FLASH",
	1: "VIDEO_HTML5",
}
var BidRequest_Video_GVideoFormat_value = map[string]int32{
	"VIDEO_FLASH": 0,
	"VIDEO_HTML5": 1,
}

func (x BidRequest_Video_GVideoFormat) Enum() *BidRequest_Video_GVideoFormat {
	p := new(BidRequest_Video_GVideoFormat)
	*p = x
	return p
}
func (x BidRequest_Video_GVideoFormat) String() string {
	return proto.EnumName(BidRequest_Video_GVideoFormat_name, int32(x))
}
func (x *BidRequest_Video_GVideoFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Video_GVideoFormat_value, data, "BidRequest_Video_GVideoFormat")
	if err != nil {
		return err
	}
	*x = BidRequest_Video_GVideoFormat(value)
	return nil
}

// These are the formats of the creatives allowed in this companion ad
// slot.
type BidRequest_Video_CompanionSlot_CreativeFormat int32

const (
	BidRequest_Video_CompanionSlot_IMAGE_CREATIVE BidRequest_Video_CompanionSlot_CreativeFormat = 0
	BidRequest_Video_CompanionSlot_FLASH_CREATIVE BidRequest_Video_CompanionSlot_CreativeFormat = 1
	BidRequest_Video_CompanionSlot_HTML_CREATIVE  BidRequest_Video_CompanionSlot_CreativeFormat = 2
)

var BidRequest_Video_CompanionSlot_CreativeFormat_name = map[int32]string{
	0: "IMAGE_CREATIVE",
	1: "FLASH_CREATIVE",
	2: "HTML_CREATIVE",
}
var BidRequest_Video_CompanionSlot_CreativeFormat_value = map[string]int32{
	"IMAGE_CREATIVE": 0,
	"FLASH_CREATIVE": 1,
	"HTML_CREATIVE":  2,
}

func (x BidRequest_Video_CompanionSlot_CreativeFormat) Enum() *BidRequest_Video_CompanionSlot_CreativeFormat {
	p := new(BidRequest_Video_CompanionSlot_CreativeFormat)
	*p = x
	return p
}
func (x BidRequest_Video_CompanionSlot_CreativeFormat) String() string {
	return proto.EnumName(BidRequest_Video_CompanionSlot_CreativeFormat_name, int32(x))
}
func (x *BidRequest_Video_CompanionSlot_CreativeFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Video_CompanionSlot_CreativeFormat_value, data, "BidRequest_Video_CompanionSlot_CreativeFormat")
	if err != nil {
		return err
	}
	*x = BidRequest_Video_CompanionSlot_CreativeFormat(value)
	return nil
}

// Visibility information for the slot.
type BidRequest_AdSlot_SlotVisibility int32

const (
	BidRequest_AdSlot_NO_DETECTION   BidRequest_AdSlot_SlotVisibility = 0
	BidRequest_AdSlot_ABOVE_THE_FOLD BidRequest_AdSlot_SlotVisibility = 1
	BidRequest_AdSlot_BELOW_THE_FOLD BidRequest_AdSlot_SlotVisibility = 2
)

var BidRequest_AdSlot_SlotVisibility_name = map[int32]string{
	0: "NO_DETECTION",
	1: "ABOVE_THE_FOLD",
	2: "BELOW_THE_FOLD",
}
var BidRequest_AdSlot_SlotVisibility_value = map[string]int32{
	"NO_DETECTION":   0,
	"ABOVE_THE_FOLD": 1,
	"BELOW_THE_FOLD": 2,
}

func (x BidRequest_AdSlot_SlotVisibility) Enum() *BidRequest_AdSlot_SlotVisibility {
	p := new(BidRequest_AdSlot_SlotVisibility)
	*p = x
	return p
}
func (x BidRequest_AdSlot_SlotVisibility) String() string {
	return proto.EnumName(BidRequest_AdSlot_SlotVisibility_name, int32(x))
}
func (x *BidRequest_AdSlot_SlotVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_AdSlot_SlotVisibility_value, data, "BidRequest_AdSlot_SlotVisibility")
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_SlotVisibility(value)
	return nil
}

type BidRequest struct {
	// Unique request id generated by Google.  This is 16 bytes long.
	Id []byte `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	// The first 3 bytes of the IP address in network byte order for IPv4, or the
	// first 6 bytes for IPv6.  Note that the number and position of the bytes
	// included from IPv6 addresses may change later.
	Ip []byte `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	// The Google ID for the user as described in the documentation for the cookie
	// matching service.  This field is the unpadded web-safe base64 encoded
	// version of a binary cookie id. See the "Base 64 Encoding with URL and
	// Filename Safe Alphabet" section in RFC 3548 for encoding details.  This
	// field is the same as the Google ID returned by the cookie matching service.
	GoogleUserId *string `protobuf:"bytes,21,opt,name=google_user_id" json:"google_user_id,omitempty"`
	// The version number of the google_user_id.  We may sometimes change the
	// mapping from cookie to google_user_id.  In this case the version will be
	// incremented.
	CookieVersion *uint32 `protobuf:"varint,20,opt,name=cookie_version" json:"cookie_version,omitempty"`
	// The time in seconds since the google_user_id was created.
	CookieAgeSeconds *int32 `protobuf:"varint,31,opt,name=cookie_age_seconds" json:"cookie_age_seconds,omitempty"`
	// Match data stored for this google_user_id through the cookie matching
	// service.  If a match exists, then this field holds the decoded data that
	// was passed in the google_hm parameter.
	HostedMatchData []byte `protobuf:"bytes,37,opt,name=hosted_match_data" json:"hosted_match_data,omitempty"`
	// A string that identifies the browser and type of device that sent the
	// request.
	UserAgent *string `protobuf:"bytes,6,opt,name=user_agent" json:"user_agent,omitempty"`
	// Geo information.  These use a subset of the codes used in the AdWords API.
	// See the geo-tables.csv table in the technical documentation for a list of
	// ids.  The geo_criteria_id field replaces the deprecated country, region,
	// city, and metro fields.
	GeoCriteriaId *int32 `protobuf:"varint,39,opt,name=geo_criteria_id" json:"geo_criteria_id,omitempty"`
	// Detected postal code of the appropriate type for the country (e.g. zip code
	// if the country is "US").  The postal_code_prefix field is set when accuracy
	// is too low to imply a full code, otherwise the postal_code field is set.
	PostalCode       *string `protobuf:"bytes,33,opt,name=postal_code" json:"postal_code,omitempty"`
	PostalCodePrefix *string `protobuf:"bytes,34,opt,name=postal_code_prefix" json:"postal_code_prefix,omitempty"`
	// Hyperlocal targeting signal when available, encrypted as described at
	// https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-hyperlocal
	EncryptedHyperlocalSet []byte `protobuf:"bytes,40,opt,name=encrypted_hyperlocal_set" json:"encrypted_hyperlocal_set,omitempty"`
	// The offset of the user's time from GMT in minutes.  For example, GMT+10 is
	// timezone_offset = 600.
	TimezoneOffset *int32 `protobuf:"varint,25,opt,name=timezone_offset" json:"timezone_offset,omitempty"`
	// List of detected user verticals.  Currently unused.
	UserVertical []int32                `protobuf:"varint,30,rep,packed,name=user_vertical" json:"user_vertical,omitempty"`
	UserList     []*BidRequest_UserList `protobuf:"bytes,32,rep,name=user_list" json:"user_list,omitempty"`
	// The seller network id.  See seller-network-ids.txt file in the technical
	// documentation for a list of ids.  This is only set if the site is not
	// anonymous and the publisher allows site targeting.
	SellerNetworkId *int32 `protobuf:"varint,41,opt,name=seller_network_id" json:"seller_network_id,omitempty"`
	// The URL of the page with parameters removed.  This is only set if the site
	// is not anonymous and the publisher allows site targeting.  You can use
	// anonymous_id for targeting if the inventory is anonymous.  Otherwise, use
	// detected_vertical's.  Only one of url or anonymous_id is ever set in the
	// same request.
	Url *string `protobuf:"bytes,11,opt,name=url" json:"url,omitempty"`
	// An id for the domain of the page.  This is set when the inventory is
	// anonymous.  Only one of url or anonymous_id is ever set in the same
	// request.
	AnonymousId *string `protobuf:"bytes,19,opt,name=anonymous_id" json:"anonymous_id,omitempty"`
	// The two or 5 letter code for the languages of the page or the user.  The
	// documentation for the codes is at
	// https://developers.google.com/adwords/api/docs/appendix/languagecodes
	DetectedLanguage []string `protobuf:"bytes,12,rep,name=detected_language" json:"detected_language,omitempty"`
	// Unordered list of detected content verticals.  See the
	// publisher-verticals.txt file in the technical documentation for a list of
	// ids.
	DetectedVertical []*BidRequest_Vertical `protobuf:"bytes,13,rep,name=detected_vertical" json:"detected_vertical,omitempty"`
	// The dictionary version used in the detected_vertical field.  This is
	// currently always "2".
	VerticalDictionaryVersion *int32 `protobuf:"varint,24,opt,name=vertical_dictionary_version" json:"vertical_dictionary_version,omitempty"`
	// List of detected content labels.  See content-labels.txt file in the
	// technical documentation for a list of ids.
	DetectedContentLabel []int32 `protobuf:"varint,26,rep,packed,name=detected_content_label" json:"detected_content_label,omitempty"`
	// Site lists that apply to this publisher.  See site-lists.txt in the
	// technical documentation for a list of ids.
	SiteListId []int32                `protobuf:"varint,36,rep,name=site_list_id" json:"site_list_id,omitempty"`
	KeyValue   []*BidRequest_KeyValue `protobuf:"bytes,38,rep,name=key_value" json:"key_value,omitempty"`
	Mobile     *BidRequest_Mobile     `protobuf:"bytes,28,opt,name=mobile" json:"mobile,omitempty"`
	Video      *BidRequest_Video      `protobuf:"bytes,29,opt,name=video" json:"video,omitempty"`
	// The publisher settings list id that applies to this page.  See the
	// Targeting section of the RTB documentation for details.
	PublisherSettingsListId *uint64                           `protobuf:"fixed64,42,opt,name=publisher_settings_list_id" json:"publisher_settings_list_id,omitempty"`
	Adslot                  []*BidRequest_AdSlot              `protobuf:"bytes,14,rep,name=adslot" json:"adslot,omitempty"`
	BidResponseFeedback     []*BidRequest_BidResponseFeedback `protobuf:"bytes,44,rep,name=bid_response_feedback" json:"bid_response_feedback,omitempty"`
	// If true, then this is a test request.  Results will not be displayed to
	// users and you will not be billed for a response even if it wins the
	// auction.  You should still do regular processing since the request may be
	// used to evaluate latencies or for other testing.
	IsTest *bool `protobuf:"varint,15,opt,name=is_test,def=0" json:"is_test,omitempty"`
	// If true, then this request is intended to measure network latency.  Please
	// return an empty BidResponse with only processing_time_ms set as quickly as
	// possible without executing any bidding logic.
	IsPing *bool `protobuf:"varint,17,opt,name=is_ping,def=0" json:"is_ping,omitempty"`
	// If true, then the selective callout model predicted that you will not bid
	// on this request.  We send a sampled percentage of such requests so that we
	// can automatically update the model when bidding patterns change.
	IsPredictedToBeIgnored *bool `protobuf:"varint,45,opt,name=is_predicted_to_be_ignored,def=0" json:"is_predicted_to_be_ignored,omitempty"`
	// These are deprecated.  Please ignore.
	DEPRECATEDProtocolVersion         *int32                        `protobuf:"varint,1,opt,name=DEPRECATED_protocol_version" json:"DEPRECATED_protocol_version,omitempty"`
	DEPRECATEDClickTrackingUrl        *string                       `protobuf:"bytes,3,opt,name=DEPRECATED_click_tracking_url" json:"DEPRECATED_click_tracking_url,omitempty"`
	DEPRECATEDCookie                  *uint64                       `protobuf:"varint,5,opt,name=DEPRECATED_cookie" json:"DEPRECATED_cookie,omitempty"`
	DEPRECATEDCountry                 *string                       `protobuf:"bytes,7,opt,name=DEPRECATED_country" json:"DEPRECATED_country,omitempty"`
	DEPRECATEDRegion                  *string                       `protobuf:"bytes,8,opt,name=DEPRECATED_region" json:"DEPRECATED_region,omitempty"`
	DEPRECATEDCity                    *string                       `protobuf:"bytes,9,opt,name=DEPRECATED_city" json:"DEPRECATED_city,omitempty"`
	DEPRECATEDMetro                   *int32                        `protobuf:"varint,10,opt,name=DEPRECATED_metro" json:"DEPRECATED_metro,omitempty"`
	DEPRECATEDHashedCookie            []byte                        `protobuf:"bytes,16,opt,name=DEPRECATED_hashed_cookie" json:"DEPRECATED_hashed_cookie,omitempty"`
	DEPRECATEDExcludedClickThroughUrl []string                      `protobuf:"bytes,18,rep,name=DEPRECATED_excluded_click_through_url" json:"DEPRECATED_excluded_click_through_url,omitempty"`
	DEPRECATEDSellerNetwork           *string                       `protobuf:"bytes,22,opt,name=DEPRECATED_seller_network" json:"DEPRECATED_seller_network,omitempty"`
	DEPRECATEDPublisherSettingsListId []byte                        `protobuf:"bytes,23,opt,name=DEPRECATED_publisher_settings_list_id" json:"DEPRECATED_publisher_settings_list_id,omitempty"`
	DEPRECATEDMatchingNetwork         []*BidRequest_MatchingNetwork `protobuf:"bytes,27,rep,name=DEPRECATED_matching_network" json:"DEPRECATED_matching_network,omitempty"`
	DEPRECATEDExperimentalDeadline    *bool                         `protobuf:"varint,35,opt,name=DEPRECATED_experimental_deadline,def=0" json:"DEPRECATED_experimental_deadline,omitempty"`
	XXX_unrecognized                  []byte                        `json:"-"`
}

func (m *BidRequest) Reset()         { *m = BidRequest{} }
func (m *BidRequest) String() string { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()    {}

const Default_BidRequest_IsTest bool = false
const Default_BidRequest_IsPing bool = false
const Default_BidRequest_IsPredictedToBeIgnored bool = false
const Default_BidRequest_DEPRECATEDExperimentalDeadline bool = false

func (m *BidRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BidRequest) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *BidRequest) GetGoogleUserId() string {
	if m != nil && m.GoogleUserId != nil {
		return *m.GoogleUserId
	}
	return ""
}

func (m *BidRequest) GetCookieVersion() uint32 {
	if m != nil && m.CookieVersion != nil {
		return *m.CookieVersion
	}
	return 0
}

func (m *BidRequest) GetCookieAgeSeconds() int32 {
	if m != nil && m.CookieAgeSeconds != nil {
		return *m.CookieAgeSeconds
	}
	return 0
}

func (m *BidRequest) GetHostedMatchData() []byte {
	if m != nil {
		return m.HostedMatchData
	}
	return nil
}

func (m *BidRequest) GetUserAgent() string {
	if m != nil && m.UserAgent != nil {
		return *m.UserAgent
	}
	return ""
}

func (m *BidRequest) GetGeoCriteriaId() int32 {
	if m != nil && m.GeoCriteriaId != nil {
		return *m.GeoCriteriaId
	}
	return 0
}

func (m *BidRequest) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *BidRequest) GetPostalCodePrefix() string {
	if m != nil && m.PostalCodePrefix != nil {
		return *m.PostalCodePrefix
	}
	return ""
}

func (m *BidRequest) GetEncryptedHyperlocalSet() []byte {
	if m != nil {
		return m.EncryptedHyperlocalSet
	}
	return nil
}

func (m *BidRequest) GetTimezoneOffset() int32 {
	if m != nil && m.TimezoneOffset != nil {
		return *m.TimezoneOffset
	}
	return 0
}

func (m *BidRequest) GetUserVertical() []int32 {
	if m != nil {
		return m.UserVertical
	}
	return nil
}

func (m *BidRequest) GetUserList() []*BidRequest_UserList {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *BidRequest) GetSellerNetworkId() int32 {
	if m != nil && m.SellerNetworkId != nil {
		return *m.SellerNetworkId
	}
	return 0
}

func (m *BidRequest) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *BidRequest) GetAnonymousId() string {
	if m != nil && m.AnonymousId != nil {
		return *m.AnonymousId
	}
	return ""
}

func (m *BidRequest) GetDetectedLanguage() []string {
	if m != nil {
		return m.DetectedLanguage
	}
	return nil
}

func (m *BidRequest) GetDetectedVertical() []*BidRequest_Vertical {
	if m != nil {
		return m.DetectedVertical
	}
	return nil
}

func (m *BidRequest) GetVerticalDictionaryVersion() int32 {
	if m != nil && m.VerticalDictionaryVersion != nil {
		return *m.VerticalDictionaryVersion
	}
	return 0
}

func (m *BidRequest) GetDetectedContentLabel() []int32 {
	if m != nil {
		return m.DetectedContentLabel
	}
	return nil
}

func (m *BidRequest) GetSiteListId() []int32 {
	if m != nil {
		return m.SiteListId
	}
	return nil
}

func (m *BidRequest) GetKeyValue() []*BidRequest_KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *BidRequest) GetMobile() *BidRequest_Mobile {
	if m != nil {
		return m.Mobile
	}
	return nil
}

func (m *BidRequest) GetVideo() *BidRequest_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *BidRequest) GetPublisherSettingsListId() uint64 {
	if m != nil && m.PublisherSettingsListId != nil {
		return *m.PublisherSettingsListId
	}
	return 0
}

func (m *BidRequest) GetAdslot() []*BidRequest_AdSlot {
	if m != nil {
		return m.Adslot
	}
	return nil
}

func (m *BidRequest) GetBidResponseFeedback() []*BidRequest_BidResponseFeedback {
	if m != nil {
		return m.BidResponseFeedback
	}
	return nil
}

func (m *BidRequest) GetIsTest() bool {
	if m != nil && m.IsTest != nil {
		return *m.IsTest
	}
	return Default_BidRequest_IsTest
}

func (m *BidRequest) GetIsPing() bool {
	if m != nil && m.IsPing != nil {
		return *m.IsPing
	}
	return Default_BidRequest_IsPing
}

func (m *BidRequest) GetIsPredictedToBeIgnored() bool {
	if m != nil && m.IsPredictedToBeIgnored != nil {
		return *m.IsPredictedToBeIgnored
	}
	return Default_BidRequest_IsPredictedToBeIgnored
}

func (m *BidRequest) GetDEPRECATEDProtocolVersion() int32 {
	if m != nil && m.DEPRECATEDProtocolVersion != nil {
		return *m.DEPRECATEDProtocolVersion
	}
	return 0
}

func (m *BidRequest) GetDEPRECATEDClickTrackingUrl() string {
	if m != nil && m.DEPRECATEDClickTrackingUrl != nil {
		return *m.DEPRECATEDClickTrackingUrl
	}
	return ""
}

func (m *BidRequest) GetDEPRECATEDCookie() uint64 {
	if m != nil && m.DEPRECATEDCookie != nil {
		return *m.DEPRECATEDCookie
	}
	return 0
}

func (m *BidRequest) GetDEPRECATEDCountry() string {
	if m != nil && m.DEPRECATEDCountry != nil {
		return *m.DEPRECATEDCountry
	}
	return ""
}

func (m *BidRequest) GetDEPRECATEDRegion() string {
	if m != nil && m.DEPRECATEDRegion != nil {
		return *m.DEPRECATEDRegion
	}
	return ""
}

func (m *BidRequest) GetDEPRECATEDCity() string {
	if m != nil && m.DEPRECATEDCity != nil {
		return *m.DEPRECATEDCity
	}
	return ""
}

func (m *BidRequest) GetDEPRECATEDMetro() int32 {
	if m != nil && m.DEPRECATEDMetro != nil {
		return *m.DEPRECATEDMetro
	}
	return 0
}

func (m *BidRequest) GetDEPRECATEDHashedCookie() []byte {
	if m != nil {
		return m.DEPRECATEDHashedCookie
	}
	return nil
}

func (m *BidRequest) GetDEPRECATEDExcludedClickThroughUrl() []string {
	if m != nil {
		return m.DEPRECATEDExcludedClickThroughUrl
	}
	return nil
}

func (m *BidRequest) GetDEPRECATEDSellerNetwork() string {
	if m != nil && m.DEPRECATEDSellerNetwork != nil {
		return *m.DEPRECATEDSellerNetwork
	}
	return ""
}

func (m *BidRequest) GetDEPRECATEDPublisherSettingsListId() []byte {
	if m != nil {
		return m.DEPRECATEDPublisherSettingsListId
	}
	return nil
}

func (m *BidRequest) GetDEPRECATEDMatchingNetwork() []*BidRequest_MatchingNetwork {
	if m != nil {
		return m.DEPRECATEDMatchingNetwork
	}
	return nil
}

func (m *BidRequest) GetDEPRECATEDExperimentalDeadline() bool {
	if m != nil && m.DEPRECATEDExperimentalDeadline != nil {
		return *m.DEPRECATEDExperimentalDeadline
	}
	return Default_BidRequest_DEPRECATEDExperimentalDeadline
}

// A hyperlocal targeting location when available.
//
type BidRequest_Hyperlocal struct {
	// The mobile device can be at any point inside the geofence polygon defined
	// by a list of corners.  Currently, the polygon is always a parallelogram
	// with 4 corners.
	Corners          []*BidRequest_Hyperlocal_Point `protobuf:"bytes,1,rep,name=corners" json:"corners,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *BidRequest_Hyperlocal) Reset()         { *m = BidRequest_Hyperlocal{} }
func (m *BidRequest_Hyperlocal) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Hyperlocal) ProtoMessage()    {}

func (m *BidRequest_Hyperlocal) GetCorners() []*BidRequest_Hyperlocal_Point {
	if m != nil {
		return m.Corners
	}
	return nil
}

// A location on the Earth's surface.
//
type BidRequest_Hyperlocal_Point struct {
	Latitude         *float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BidRequest_Hyperlocal_Point) Reset()         { *m = BidRequest_Hyperlocal_Point{} }
func (m *BidRequest_Hyperlocal_Point) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Hyperlocal_Point) ProtoMessage()    {}

func (m *BidRequest_Hyperlocal_Point) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *BidRequest_Hyperlocal_Point) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

type BidRequest_HyperlocalSet struct {
	// This field currently contains at most one hyperlocal polygon.
	Hyperlocal []*BidRequest_Hyperlocal `protobuf:"bytes,1,rep,name=hyperlocal" json:"hyperlocal,omitempty"`
	// The approximate geometric center of the geofence area.  It is calculated
	// exclusively based on the geometric shape of the geofence area and in no
	// way indicates the mobile device's actual location within the geofence
	// area.  If multiple hyperlocal polygons are specified above then
	// center_point is the geometric center of all hyperlocal polygons.
	CenterPoint      *BidRequest_Hyperlocal_Point `protobuf:"bytes,2,opt,name=center_point" json:"center_point,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *BidRequest_HyperlocalSet) Reset()         { *m = BidRequest_HyperlocalSet{} }
func (m *BidRequest_HyperlocalSet) String() string { return proto.CompactTextString(m) }
func (*BidRequest_HyperlocalSet) ProtoMessage()    {}

func (m *BidRequest_HyperlocalSet) GetHyperlocal() []*BidRequest_Hyperlocal {
	if m != nil {
		return m.Hyperlocal
	}
	return nil
}

func (m *BidRequest_HyperlocalSet) GetCenterPoint() *BidRequest_Hyperlocal_Point {
	if m != nil {
		return m.CenterPoint
	}
	return nil
}

// Audience-targeting list to which the user has been added.  See the Buyer UI
// Help topics on remarketing, where it is called a remarketing list.
//
type BidRequest_UserList struct {
	// The user list id.
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The time in seconds since the user was added to the list.
	AgeSeconds       *int32 `protobuf:"varint,2,opt,name=age_seconds" json:"age_seconds,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidRequest_UserList) Reset()         { *m = BidRequest_UserList{} }
func (m *BidRequest_UserList) String() string { return proto.CompactTextString(m) }
func (*BidRequest_UserList) ProtoMessage()    {}

func (m *BidRequest_UserList) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BidRequest_UserList) GetAgeSeconds() int32 {
	if m != nil && m.AgeSeconds != nil {
		return *m.AgeSeconds
	}
	return 0
}

// One or more detected verticals for the page as determined by Google.
//
type BidRequest_Vertical struct {
	// The vertical id.  See the publisher-verticals.txt file in the technical
	// documentation for a list of ids.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Weight for this vertical, in the (0.0, 1.0] range.  More relevant
	// verticals have higher weights.
	Weight           *float32 `protobuf:"fixed32,2,req,name=weight" json:"weight,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BidRequest_Vertical) Reset()         { *m = BidRequest_Vertical{} }
func (m *BidRequest_Vertical) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Vertical) ProtoMessage()    {}

func (m *BidRequest_Vertical) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BidRequest_Vertical) GetWeight() float32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

// Additional key-value attributes.  Currently unused.
type BidRequest_KeyValue struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BidRequest_KeyValue) Reset()         { *m = BidRequest_KeyValue{} }
func (m *BidRequest_KeyValue) String() string { return proto.CompactTextString(m) }
func (*BidRequest_KeyValue) ProtoMessage()    {}

func (m *BidRequest_KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *BidRequest_KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Information for ad queries coming from mobile devices.  A mobile device is
// either a smartphone or a tablet.  This is present for ad queries both from
// mobile devices browsing the web and from mobile apps.
type BidRequest_Mobile struct {
	// The platform of the mobile device.  Examples: android, iphone, palm
	Platform *string `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	// The brand of the mobile device, e.g. Nokia, Samsung.
	Brand *string `protobuf:"bytes,12,opt,name=brand" json:"brand,omitempty"`
	// The model of the mobile device, e.g. N70, Galaxy.
	Model *string `protobuf:"bytes,13,opt,name=model" json:"model,omitempty"`
	// The OS version; e.g. 2.1 for Android 2.1, or 3.3.1 for iOS 3.3.1.
	OsVersion *BidRequest_Mobile_DeviceOsVersion `protobuf:"bytes,14,opt,name=os_version" json:"os_version,omitempty"`
	// This is the identifier uniquely identifies the mobile carrier when the
	// mobile device is connected to the internet via the carrier (as opposed
	// to via WiFi).  To look up carrier name and country from carrier ID,
	// please refer to
	// https://developers.google.com/adwords/api/docs/appendix/mobilecarriers.
	CarrierId *int64 `protobuf:"varint,18,opt,name=carrier_id" json:"carrier_id,omitempty"`
	// If true, then this request is from a mobile application.  Will always be
	// true when app_id is set.  May also be true for anonymous inventory, in
	// which case anonymous_id will be set.
	IsApp *bool `protobuf:"varint,7,opt,name=is_app,def=0" json:"is_app,omitempty"`
	// The identifier of the mobile app when this ad query comes from a mobile
	// app.  If the app was downloaded from the Apple iTunes app store, then
	// this is the app-store id.  For Android devices, this is the fully
	// qualified package name.  Examples: 343200656, com.rovio.angrybirds
	AppId            *string                          `protobuf:"bytes,6,opt,name=app_id" json:"app_id,omitempty"`
	MobileDeviceType *BidRequest_Mobile_MobileDevType `protobuf:"varint,8,opt,name=mobile_device_type,enum=google.BidRequest_Mobile_MobileDevType,def=0" json:"mobile_device_type,omitempty"`
	// The width of the mobile device screen in pixels.
	ScreenWidth *int32 `protobuf:"varint,15,opt,name=screen_width" json:"screen_width,omitempty"`
	// The height of the mobile device screen in pixels.
	ScreenHeight      *int32 `protobuf:"varint,16,opt,name=screen_height" json:"screen_height,omitempty"`
	ScreenOrientation *int32 `protobuf:"varint,9,opt,name=screen_orientation,def=0" json:"screen_orientation,omitempty"`
	// If true, then this is a mobile full screen ad request.
	IsInterstitialRequest *bool `protobuf:"varint,10,opt,name=is_interstitial_request,def=0" json:"is_interstitial_request,omitempty"`
	// This field contains the IDs of categories to which the current mobile app
	// belongs.  This field will be empty if is_app is false.  The mapping
	// between mobile apps and categories is defined by the Google Play Store
	// for Android apps, or the Apple iTunes Store for iOS apps.  To look up
	// category name from category ID, please refer to
	// https://developers.google.com/adwords/api/docs/appendix/mobileappcategories
	AppCategoryIds []int32 `protobuf:"varint,11,rep,name=app_category_ids" json:"app_category_ids,omitempty"`
	// For a mobile web request, this field indicates whether the page is
	// optimized for mobile browsers on high-end mobile phones.
	IsMobileWebOptimized *bool `protobuf:"varint,17,opt,name=is_mobile_web_optimized,def=0" json:"is_mobile_web_optimized,omitempty"`
	// Used for high-density devices (e.g. iOS retina displays), where non-
	// default value indicates that the nominal screen size (with pixels as the
	// unit) does not describe the actual number of pixels in the screen.  For
	// example, nominal width and height may be 320x640 for a screen that
	// actually has 640x1080 pixels, in which case screen_width=320,
	// screen_height=640, and device_pixel_ratio_millis=2000, since each axis
	// has twice as many pixels as its dimensions would indicate.
	DevicePixelRatioMillis *int32 `protobuf:"varint,19,opt,name=device_pixel_ratio_millis,def=1000" json:"device_pixel_ratio_millis,omitempty"`
	// Apple's identifier for advertising (IDFA) when available, encrypted as
	// described at https://support.google.com/adxbuyer/answer/3221407
	// For encrypted_idfa the plaintext achieved after decrypting the ciphertext
	// is the IDFA returned by iOS's [ASIdentifierManager
	// advertisingIdentifier].  For encrypted_hashed_idfa the plaintext is the
	// MD5 hash of the IDFA.  Only one of the two fields will be available,
	// depending on the version of the SDK making the request.  Later SDKs will
	// provide the IDFA unhashed.
	EncryptedIdfa       []byte `protobuf:"bytes,20,opt,name=encrypted_idfa" json:"encrypted_idfa,omitempty"`
	EncryptedHashedIdfa []byte `protobuf:"bytes,21,opt,name=encrypted_hashed_idfa" json:"encrypted_hashed_idfa,omitempty"`
	// These are deprecated.  Please ignore.
	DEPRECATEDAppName        *string `protobuf:"bytes,1,opt,name=DEPRECATED_app_name" json:"DEPRECATED_app_name,omitempty"`
	DEPRECATEDCompanyName    *string `protobuf:"bytes,2,opt,name=DEPRECATED_company_name" json:"DEPRECATED_company_name,omitempty"`
	DEPRECATEDCarrierName    *string `protobuf:"bytes,4,opt,name=DEPRECATED_carrier_name" json:"DEPRECATED_carrier_name,omitempty"`
	DEPRECATEDCarrierCountry *string `protobuf:"bytes,5,opt,name=DEPRECATED_carrier_country" json:"DEPRECATED_carrier_country,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *BidRequest_Mobile) Reset()         { *m = BidRequest_Mobile{} }
func (m *BidRequest_Mobile) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Mobile) ProtoMessage()    {}

const Default_BidRequest_Mobile_IsApp bool = false
const Default_BidRequest_Mobile_MobileDeviceType BidRequest_Mobile_MobileDevType = BidRequest_Mobile_UNKNOWN
const Default_BidRequest_Mobile_ScreenOrientation int32 = 0
const Default_BidRequest_Mobile_IsInterstitialRequest bool = false
const Default_BidRequest_Mobile_IsMobileWebOptimized bool = false
const Default_BidRequest_Mobile_DevicePixelRatioMillis int32 = 1000

func (m *BidRequest_Mobile) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *BidRequest_Mobile) GetBrand() string {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return ""
}

func (m *BidRequest_Mobile) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *BidRequest_Mobile) GetOsVersion() *BidRequest_Mobile_DeviceOsVersion {
	if m != nil {
		return m.OsVersion
	}
	return nil
}

func (m *BidRequest_Mobile) GetCarrierId() int64 {
	if m != nil && m.CarrierId != nil {
		return *m.CarrierId
	}
	return 0
}

func (m *BidRequest_Mobile) GetIsApp() bool {
	if m != nil && m.IsApp != nil {
		return *m.IsApp
	}
	return Default_BidRequest_Mobile_IsApp
}

func (m *BidRequest_Mobile) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *BidRequest_Mobile) GetMobileDeviceType() BidRequest_Mobile_MobileDevType {
	if m != nil && m.MobileDeviceType != nil {
		return *m.MobileDeviceType
	}
	return Default_BidRequest_Mobile_MobileDeviceType
}

func (m *BidRequest_Mobile) GetScreenWidth() int32 {
	if m != nil && m.ScreenWidth != nil {
		return *m.ScreenWidth
	}
	return 0
}

func (m *BidRequest_Mobile) GetScreenHeight() int32 {
	if m != nil && m.ScreenHeight != nil {
		return *m.ScreenHeight
	}
	return 0
}

func (m *BidRequest_Mobile) GetScreenOrientation() int32 {
	if m != nil && m.ScreenOrientation != nil {
		return *m.ScreenOrientation
	}
	return Default_BidRequest_Mobile_ScreenOrientation
}

func (m *BidRequest_Mobile) GetIsInterstitialRequest() bool {
	if m != nil && m.IsInterstitialRequest != nil {
		return *m.IsInterstitialRequest
	}
	return Default_BidRequest_Mobile_IsInterstitialRequest
}

func (m *BidRequest_Mobile) GetAppCategoryIds() []int32 {
	if m != nil {
		return m.AppCategoryIds
	}
	return nil
}

func (m *BidRequest_Mobile) GetIsMobileWebOptimized() bool {
	if m != nil && m.IsMobileWebOptimized != nil {
		return *m.IsMobileWebOptimized
	}
	return Default_BidRequest_Mobile_IsMobileWebOptimized
}

func (m *BidRequest_Mobile) GetDevicePixelRatioMillis() int32 {
	if m != nil && m.DevicePixelRatioMillis != nil {
		return *m.DevicePixelRatioMillis
	}
	return Default_BidRequest_Mobile_DevicePixelRatioMillis
}

func (m *BidRequest_Mobile) GetEncryptedIdfa() []byte {
	if m != nil {
		return m.EncryptedIdfa
	}
	return nil
}

func (m *BidRequest_Mobile) GetEncryptedHashedIdfa() []byte {
	if m != nil {
		return m.EncryptedHashedIdfa
	}
	return nil
}

func (m *BidRequest_Mobile) GetDEPRECATEDAppName() string {
	if m != nil && m.DEPRECATEDAppName != nil {
		return *m.DEPRECATEDAppName
	}
	return ""
}

func (m *BidRequest_Mobile) GetDEPRECATEDCompanyName() string {
	if m != nil && m.DEPRECATEDCompanyName != nil {
		return *m.DEPRECATEDCompanyName
	}
	return ""
}

func (m *BidRequest_Mobile) GetDEPRECATEDCarrierName() string {
	if m != nil && m.DEPRECATEDCarrierName != nil {
		return *m.DEPRECATEDCarrierName
	}
	return ""
}

func (m *BidRequest_Mobile) GetDEPRECATEDCarrierCountry() string {
	if m != nil && m.DEPRECATEDCarrierCountry != nil {
		return *m.DEPRECATEDCarrierCountry
	}
	return ""
}

// This message contains the OS version of the platform.  For instance, for
// Android 2.1, os_version_major=2, os_version_minor=1, and os_version_micro
// will remain unpopulated.  For iPhone 3.3.1, os_version_major=3,
// os_version_minor=3, and os_version_micro=1.
type BidRequest_Mobile_DeviceOsVersion struct {
	OsVersionMajor   *int32 `protobuf:"varint,1,opt,name=os_version_major" json:"os_version_major,omitempty"`
	OsVersionMinor   *int32 `protobuf:"varint,2,opt,name=os_version_minor" json:"os_version_minor,omitempty"`
	OsVersionMicro   *int32 `protobuf:"varint,3,opt,name=os_version_micro" json:"os_version_micro,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidRequest_Mobile_DeviceOsVersion) Reset()         { *m = BidRequest_Mobile_DeviceOsVersion{} }
func (m *BidRequest_Mobile_DeviceOsVersion) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Mobile_DeviceOsVersion) ProtoMessage()    {}

func (m *BidRequest_Mobile_DeviceOsVersion) GetOsVersionMajor() int32 {
	if m != nil && m.OsVersionMajor != nil {
		return *m.OsVersionMajor
	}
	return 0
}

func (m *BidRequest_Mobile_DeviceOsVersion) GetOsVersionMinor() int32 {
	if m != nil && m.OsVersionMinor != nil {
		return *m.OsVersionMinor
	}
	return 0
}

func (m *BidRequest_Mobile_DeviceOsVersion) GetOsVersionMicro() int32 {
	if m != nil && m.OsVersionMicro != nil {
		return *m.OsVersionMicro
	}
	return 0
}

// Information about the video if this is an in-video ad request.
//
type BidRequest_Video struct {
	// The URL of the page that the publisher gives Google to describe the video
	// content, with parameters removed.
	DescriptionUrl *string `protobuf:"bytes,10,opt,name=description_url" json:"description_url,omitempty"`
	// If true, the video is embedded on pages out of the publisher's domain.
	IsEmbeddedOffsite *bool `protobuf:"varint,11,opt,name=is_embedded_offsite,def=0" json:"is_embedded_offsite,omitempty"`
	// The time in milliseconds from the start of the video when the ad will be
	// displayed.  0 means pre-roll and -1 means post-roll.  The value is valid
	// only if this param is set.  When not set, the display position is
	// unknown.
	VideoadStartDelay *int32 `protobuf:"varint,1,opt,name=videoad_start_delay" json:"videoad_start_delay,omitempty"`
	// The maximum duration in milliseconds of the ad that you should return.
	// If this is not set or has value <= 0, any duration is allowed.
	MaxAdDuration *int32 `protobuf:"varint,2,opt,name=max_ad_duration" json:"max_ad_duration,omitempty"`
	// The minimum duration in milliseconds of the ad that you should return.
	// If this is not set or has value <= 0, there is no minimum duration.
	MinAdDuration    *int32                                    `protobuf:"varint,8,opt,name=min_ad_duration" json:"min_ad_duration,omitempty"`
	InventoryType    *int32                                    `protobuf:"varint,3,opt,name=inventory_type,def=0" json:"inventory_type,omitempty"`
	VideoAdSkippable *BidRequest_Video_SkippableBidRequestType `protobuf:"varint,4,opt,name=video_ad_skippable,enum=google.BidRequest_Video_SkippableBidRequestType,def=0" json:"video_ad_skippable,omitempty"`
	// The maximum duration in milliseconds for the ad you should return, if
	// this ad is skippable (this generally differs from the maximum duration
	// allowed for non-skippable ads).  If this is not set or has value <= 0,
	// any duration is allowed.
	SkippableMaxAdDuration *int32                            `protobuf:"varint,5,opt,name=skippable_max_ad_duration" json:"skippable_max_ad_duration,omitempty"`
	AllowedVideoFormats    []BidRequest_Video_GVideoFormat   `protobuf:"varint,6,rep,name=allowed_video_formats,enum=google.BidRequest_Video_GVideoFormat" json:"allowed_video_formats,omitempty"`
	CompanionSlot          []*BidRequest_Video_CompanionSlot `protobuf:"bytes,7,rep,name=companion_slot" json:"companion_slot,omitempty"`
	XXX_unrecognized       []byte                            `json:"-"`
}

func (m *BidRequest_Video) Reset()         { *m = BidRequest_Video{} }
func (m *BidRequest_Video) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Video) ProtoMessage()    {}

const Default_BidRequest_Video_IsEmbeddedOffsite bool = false
const Default_BidRequest_Video_InventoryType int32 = 0
const Default_BidRequest_Video_VideoAdSkippable BidRequest_Video_SkippableBidRequestType = BidRequest_Video_ALLOW_SKIPPABLE

func (m *BidRequest_Video) GetDescriptionUrl() string {
	if m != nil && m.DescriptionUrl != nil {
		return *m.DescriptionUrl
	}
	return ""
}

func (m *BidRequest_Video) GetIsEmbeddedOffsite() bool {
	if m != nil && m.IsEmbeddedOffsite != nil {
		return *m.IsEmbeddedOffsite
	}
	return Default_BidRequest_Video_IsEmbeddedOffsite
}

func (m *BidRequest_Video) GetVideoadStartDelay() int32 {
	if m != nil && m.VideoadStartDelay != nil {
		return *m.VideoadStartDelay
	}
	return 0
}

func (m *BidRequest_Video) GetMaxAdDuration() int32 {
	if m != nil && m.MaxAdDuration != nil {
		return *m.MaxAdDuration
	}
	return 0
}

func (m *BidRequest_Video) GetMinAdDuration() int32 {
	if m != nil && m.MinAdDuration != nil {
		return *m.MinAdDuration
	}
	return 0
}

func (m *BidRequest_Video) GetInventoryType() int32 {
	if m != nil && m.InventoryType != nil {
		return *m.InventoryType
	}
	return Default_BidRequest_Video_InventoryType
}

func (m *BidRequest_Video) GetVideoAdSkippable() BidRequest_Video_SkippableBidRequestType {
	if m != nil && m.VideoAdSkippable != nil {
		return *m.VideoAdSkippable
	}
	return Default_BidRequest_Video_VideoAdSkippable
}

func (m *BidRequest_Video) GetSkippableMaxAdDuration() int32 {
	if m != nil && m.SkippableMaxAdDuration != nil {
		return *m.SkippableMaxAdDuration
	}
	return 0
}

func (m *BidRequest_Video) GetAllowedVideoFormats() []BidRequest_Video_GVideoFormat {
	if m != nil {
		return m.AllowedVideoFormats
	}
	return nil
}

func (m *BidRequest_Video) GetCompanionSlot() []*BidRequest_Video_CompanionSlot {
	if m != nil {
		return m.CompanionSlot
	}
	return nil
}

// Information about the companion ad slots that can be shown with the
// video.  While this is a repeated field there will only be one value in
// most cases.  If there are no companion ads available this field will not
// be set.
//
type BidRequest_Video_CompanionSlot struct {
	// These fields represent the available heights and widths in this slot.
	// There will always be the same number heights and widths fields.
	Height           []int32                                         `protobuf:"varint,1,rep,packed,name=height" json:"height,omitempty"`
	Width            []int32                                         `protobuf:"varint,2,rep,packed,name=width" json:"width,omitempty"`
	CreativeFormat   []BidRequest_Video_CompanionSlot_CreativeFormat `protobuf:"varint,3,rep,name=creative_format,enum=google.BidRequest_Video_CompanionSlot_CreativeFormat" json:"creative_format,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *BidRequest_Video_CompanionSlot) Reset()         { *m = BidRequest_Video_CompanionSlot{} }
func (m *BidRequest_Video_CompanionSlot) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Video_CompanionSlot) ProtoMessage()    {}

func (m *BidRequest_Video_CompanionSlot) GetHeight() []int32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *BidRequest_Video_CompanionSlot) GetWidth() []int32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *BidRequest_Video_CompanionSlot) GetCreativeFormat() []BidRequest_Video_CompanionSlot_CreativeFormat {
	if m != nil {
		return m.CreativeFormat
	}
	return nil
}

// -----------------------------------------------------------
// Information about the adslots on the page.
//
type BidRequest_AdSlot struct {
	// An arbitrarily assigned slot id that is unique on a given page and
	// usually starts counting from 1.  You use this to identify which slot to
	// bid on in the BidResponse.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// A stable identifier for the combination of publisher, ad slot, and page.
	AdBlockKey *uint64 `protobuf:"varint,14,opt,name=ad_block_key" json:"ad_block_key,omitempty"`
	// Set of channels of which this ad slot is a member.  A channel is a set of
	// ad slots on a site.  You can target a channel (like "the sports section",
	// or "all top banners") to get more fine-grained control over where your ad
	// shows.  Channel names are provided by the publisher.
	TargetableChannel []string `protobuf:"bytes,10,rep,name=targetable_channel" json:"targetable_channel,omitempty"`
	// The width and height in pixels of the allowed ad sizes.  Most requests
	// allow only a single size, but some allow more than one.  Widths and
	// heights must be at the same index.  For example, if the width values are
	// [728, 300, 468] and the height values are [90, 250, 60], then the allowed
	// formats are 728x90, 300x250, and 468x60.
	Width  []int32 `protobuf:"varint,2,rep,name=width" json:"width,omitempty"`
	Height []int32 `protobuf:"varint,3,rep,name=height" json:"height,omitempty"`
	// The disallowed attribute ids for the ads that can show in this slot.  See
	// the publisher-excluded-creative-attributes.txt file in the technical
	// documentation for a list of ids.
	ExcludedAttribute []int32 `protobuf:"varint,4,rep,packed,name=excluded_attribute" json:"excluded_attribute,omitempty"`
	// The allowed vendor types.  See the vendors.txt file in the technical
	// documentation for a list of ids.  When the seller_network is GDN, the
	// vendor ids listed in gdn-vendors.txt in the supporting technical
	// documentation are also allowed.
	AllowedVendorType []int32 `protobuf:"varint,6,rep,packed,name=allowed_vendor_type" json:"allowed_vendor_type,omitempty"`
	// The disallowed sensitive ad categories.  See the
	// ad-sensitive-categories.txt file in the technical documentation for a
	// list of ids.  You should enforce these exclusions if you have the ability
	// to classify ads into the listed categories.
	ExcludedSensitiveCategory []int32 `protobuf:"varint,7,rep,packed,name=excluded_sensitive_category" json:"excluded_sensitive_category,omitempty"`
	// The allowed restricted ad categories.  See the
	// ad-restricted-categories.txt file in the technical documentation for a
	// list of ids.  If you are bidding with ads in any of the listed categories
	// you MUST declare them in the bid response.
	AllowedRestrictedCategory []int32 `protobuf:"varint,16,rep,packed,name=allowed_restricted_category" json:"allowed_restricted_category,omitempty"`
	// The disallowed ad product categories.  See the ad-product-categories.txt
	// file in the technical documentation for a list of ids.  You should
	// enforce these exclusions if you have the ability to classify ads into the
	// listed categories.
	ExcludedProductCategory []int32                             `protobuf:"varint,13,rep,packed,name=excluded_product_category" json:"excluded_product_category,omitempty"`
	MatchingAdData          []*BidRequest_AdSlot_MatchingAdData `protobuf:"bytes,9,rep,name=matching_ad_data" json:"matching_ad_data,omitempty"`
	// The publisher settings list ids that apply to this slot.  See the
	// Targeting section of the RTB documentation for details.
	PublisherSettingsListId *uint64                           `protobuf:"fixed64,15,opt,name=publisher_settings_list_id" json:"publisher_settings_list_id,omitempty"`
	SlotVisibility          *BidRequest_AdSlot_SlotVisibility `protobuf:"varint,12,opt,name=slot_visibility,enum=google.BidRequest_AdSlot_SlotVisibility,def=0" json:"slot_visibility,omitempty"`
	// These are deprecated.  Please ignore.
	DEPRECATEDAllowedAttribute        []int32  `protobuf:"varint,5,rep,name=DEPRECATED_allowed_attribute" json:"DEPRECATED_allowed_attribute,omitempty"`
	DEPRECATEDPublisherSettingsListId [][]byte `protobuf:"bytes,11,rep,name=DEPRECATED_publisher_settings_list_id" json:"DEPRECATED_publisher_settings_list_id,omitempty"`
	DEPRECATEDExcludedClickThroughUrl []string `protobuf:"bytes,8,rep,name=DEPRECATED_excluded_click_through_url" json:"DEPRECATED_excluded_click_through_url,omitempty"`
	XXX_unrecognized                  []byte   `json:"-"`
}

func (m *BidRequest_AdSlot) Reset()         { *m = BidRequest_AdSlot{} }
func (m *BidRequest_AdSlot) String() string { return proto.CompactTextString(m) }
func (*BidRequest_AdSlot) ProtoMessage()    {}

const Default_BidRequest_AdSlot_SlotVisibility BidRequest_AdSlot_SlotVisibility = BidRequest_AdSlot_NO_DETECTION

func (m *BidRequest_AdSlot) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BidRequest_AdSlot) GetAdBlockKey() uint64 {
	if m != nil && m.AdBlockKey != nil {
		return *m.AdBlockKey
	}
	return 0
}

func (m *BidRequest_AdSlot) GetTargetableChannel() []string {
	if m != nil {
		return m.TargetableChannel
	}
	return nil
}

func (m *BidRequest_AdSlot) GetWidth() []int32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *BidRequest_AdSlot) GetHeight() []int32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *BidRequest_AdSlot) GetExcludedAttribute() []int32 {
	if m != nil {
		return m.ExcludedAttribute
	}
	return nil
}

func (m *BidRequest_AdSlot) GetAllowedVendorType() []int32 {
	if m != nil {
		return m.AllowedVendorType
	}
	return nil
}

func (m *BidRequest_AdSlot) GetExcludedSensitiveCategory() []int32 {
	if m != nil {
		return m.ExcludedSensitiveCategory
	}
	return nil
}

func (m *BidRequest_AdSlot) GetAllowedRestrictedCategory() []int32 {
	if m != nil {
		return m.AllowedRestrictedCategory
	}
	return nil
}

func (m *BidRequest_AdSlot) GetExcludedProductCategory() []int32 {
	if m != nil {
		return m.ExcludedProductCategory
	}
	return nil
}

func (m *BidRequest_AdSlot) GetMatchingAdData() []*BidRequest_AdSlot_MatchingAdData {
	if m != nil {
		return m.MatchingAdData
	}
	return nil
}

func (m *BidRequest_AdSlot) GetPublisherSettingsListId() uint64 {
	if m != nil && m.PublisherSettingsListId != nil {
		return *m.PublisherSettingsListId
	}
	return 0
}

func (m *BidRequest_AdSlot) GetSlotVisibility() BidRequest_AdSlot_SlotVisibility {
	if m != nil && m.SlotVisibility != nil {
		return *m.SlotVisibility
	}
	return Default_BidRequest_AdSlot_SlotVisibility
}

func (m *BidRequest_AdSlot) GetDEPRECATEDAllowedAttribute() []int32 {
	if m != nil {
		return m.DEPRECATEDAllowedAttribute
	}
	return nil
}

func (m *BidRequest_AdSlot) GetDEPRECATEDPublisherSettingsListId() [][]byte {
	if m != nil {
		return m.DEPRECATEDPublisherSettingsListId
	}
	return nil
}

func (m *BidRequest_AdSlot) GetDEPRECATEDExcludedClickThroughUrl() []string {
	if m != nil {
		return m.DEPRECATEDExcludedClickThroughUrl
	}
	return nil
}

// Information about the pre-targeting campaigns and adgroups that matched.
//
type BidRequest_AdSlot_MatchingAdData struct {
	// The adgroup id of the matching ad.
	AdgroupId *int64 `protobuf:"varint,2,opt,name=adgroup_id" json:"adgroup_id,omitempty"`
	// The minimum CPM value that you can bid to not be filtered before the
	// auction.  This may be a global minimum, or it may be a minimum set by
	// the publisher.  The value is in micros of your account currency.
	MinimumCpmMicros *int64                                         `protobuf:"varint,5,opt,name=minimum_cpm_micros" json:"minimum_cpm_micros,omitempty"`
	DirectDeal       []*BidRequest_AdSlot_MatchingAdData_DirectDeal `protobuf:"bytes,6,rep,name=direct_deal" json:"direct_deal,omitempty"`
	// These are deprecated.  Please ignore.
	DEPRECATEDCampaignId         *int64 `protobuf:"varint,1,opt,name=DEPRECATED_campaign_id" json:"DEPRECATED_campaign_id,omitempty"`
	DEPRECATEDPerBuyerMinimumCpm *bool  `protobuf:"varint,3,opt,name=DEPRECATED_per_buyer_minimum_cpm" json:"DEPRECATED_per_buyer_minimum_cpm,omitempty"`
	DEPRECATEDFixedCpmMicros     *int64 `protobuf:"varint,4,opt,name=DEPRECATED_fixed_cpm_micros" json:"DEPRECATED_fixed_cpm_micros,omitempty"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *BidRequest_AdSlot_MatchingAdData) Reset()         { *m = BidRequest_AdSlot_MatchingAdData{} }
func (m *BidRequest_AdSlot_MatchingAdData) String() string { return proto.CompactTextString(m) }
func (*BidRequest_AdSlot_MatchingAdData) ProtoMessage()    {}

func (m *BidRequest_AdSlot_MatchingAdData) GetAdgroupId() int64 {
	if m != nil && m.AdgroupId != nil {
		return *m.AdgroupId
	}
	return 0
}

func (m *BidRequest_AdSlot_MatchingAdData) GetMinimumCpmMicros() int64 {
	if m != nil && m.MinimumCpmMicros != nil {
		return *m.MinimumCpmMicros
	}
	return 0
}

func (m *BidRequest_AdSlot_MatchingAdData) GetDirectDeal() []*BidRequest_AdSlot_MatchingAdData_DirectDeal {
	if m != nil {
		return m.DirectDeal
	}
	return nil
}

func (m *BidRequest_AdSlot_MatchingAdData) GetDEPRECATEDCampaignId() int64 {
	if m != nil && m.DEPRECATEDCampaignId != nil {
		return *m.DEPRECATEDCampaignId
	}
	return 0
}

func (m *BidRequest_AdSlot_MatchingAdData) GetDEPRECATEDPerBuyerMinimumCpm() bool {
	if m != nil && m.DEPRECATEDPerBuyerMinimumCpm != nil {
		return *m.DEPRECATEDPerBuyerMinimumCpm
	}
	return false
}

func (m *BidRequest_AdSlot_MatchingAdData) GetDEPRECATEDFixedCpmMicros() int64 {
	if m != nil && m.DEPRECATEDFixedCpmMicros != nil {
		return *m.DEPRECATEDFixedCpmMicros
	}
	return 0
}

// Information about any direct deals that matched for this inventory.
//
type BidRequest_AdSlot_MatchingAdData_DirectDeal struct {
	// An id identifying the deal.
	DirectDealId *int64 `protobuf:"varint,1,opt,name=direct_deal_id" json:"direct_deal_id,omitempty"`
	// The fixed CPM deal that applies to your account for this adslot.  If
	// you choose to bid on this impression, then you must bid at least the
	// value of fixed_cpm_micros, and if you win, you will always be charged
	// fixed_cpm_micros.  The value is in micros of your account currency.
	// For example, if the fixed cpm is 1290000 (1.29 in your account
	// currency), then you need to bid at least this amount.  If you win,
	// you will be charged a CPM of 1.29 in your account currency.
	FixedCpmMicros   *int64 `protobuf:"varint,2,opt,name=fixed_cpm_micros" json:"fixed_cpm_micros,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidRequest_AdSlot_MatchingAdData_DirectDeal) Reset() {
	*m = BidRequest_AdSlot_MatchingAdData_DirectDeal{}
}
func (m *BidRequest_AdSlot_MatchingAdData_DirectDeal) String() string {
	return proto.CompactTextString(m)
}
func (*BidRequest_AdSlot_MatchingAdData_DirectDeal) ProtoMessage() {}

func (m *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetDirectDealId() int64 {
	if m != nil && m.DirectDealId != nil {
		return *m.DirectDealId
	}
	return 0
}

func (m *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetFixedCpmMicros() int64 {
	if m != nil && m.FixedCpmMicros != nil {
		return *m.FixedCpmMicros
	}
	return 0
}

// Feedback on bids submitted in previous responses.  This is only set if
// real-time feedback is enabled for your bidder.  Please contact your account
// manager if you wish to enable real-time feedback.
//
type BidRequest_BidResponseFeedback struct {
	// The unique id from BidRequest.id
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id" json:"request_id,omitempty"`
	// The index of the creative within the BidResponse if there was more than
	// one.  The index starts at zero for the first creative.  This is usually
	// the index of the BidResponse.Ad, but may be the
	// BidResponse.Ad.TemplateParameter if you use a template ad.
	CreativeIndex *int32 `protobuf:"varint,2,opt,name=creative_index" json:"creative_index,omitempty"`
	// The status code for the ad.  See creative-status-codes.txt in the
	// technical documentation for a list of ids.
	CreativeStatusCode *int32 `protobuf:"varint,3,opt,name=creative_status_code" json:"creative_status_code,omitempty"`
	// The second price cpm in micros of your account currency if your bid won
	// the auction, or the winning bid that must be exceeded to win the auction
	// if your ad did not win.  This is only set if your bid participated in the
	// auction.  It is not set if the bid was filtered prior to the auction.  It
	// is also witheld if the publisher or winning bidder has opted out of price
	// feedback, or if your account has opted out of sharing winning prices
	// with other bidders.
	CpmMicros        *int64 `protobuf:"varint,4,opt,name=cpm_micros" json:"cpm_micros,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidRequest_BidResponseFeedback) Reset()         { *m = BidRequest_BidResponseFeedback{} }
func (m *BidRequest_BidResponseFeedback) String() string { return proto.CompactTextString(m) }
func (*BidRequest_BidResponseFeedback) ProtoMessage()    {}

func (m *BidRequest_BidResponseFeedback) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *BidRequest_BidResponseFeedback) GetCreativeIndex() int32 {
	if m != nil && m.CreativeIndex != nil {
		return *m.CreativeIndex
	}
	return 0
}

func (m *BidRequest_BidResponseFeedback) GetCreativeStatusCode() int32 {
	if m != nil && m.CreativeStatusCode != nil {
		return *m.CreativeStatusCode
	}
	return 0
}

func (m *BidRequest_BidResponseFeedback) GetCpmMicros() int64 {
	if m != nil && m.CpmMicros != nil {
		return *m.CpmMicros
	}
	return 0
}

type BidRequest_MatchingNetwork struct {
	DEPRECATEDNetworkId    *string `protobuf:"bytes,1,opt,name=DEPRECATED_network_id" json:"DEPRECATED_network_id,omitempty"`
	DEPRECATEDGoogleUserId *string `protobuf:"bytes,2,opt,name=DEPRECATED_google_user_id" json:"DEPRECATED_google_user_id,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *BidRequest_MatchingNetwork) Reset()         { *m = BidRequest_MatchingNetwork{} }
func (m *BidRequest_MatchingNetwork) String() string { return proto.CompactTextString(m) }
func (*BidRequest_MatchingNetwork) ProtoMessage()    {}

func (m *BidRequest_MatchingNetwork) GetDEPRECATEDNetworkId() string {
	if m != nil && m.DEPRECATEDNetworkId != nil {
		return *m.DEPRECATEDNetworkId
	}
	return ""
}

func (m *BidRequest_MatchingNetwork) GetDEPRECATEDGoogleUserId() string {
	if m != nil && m.DEPRECATEDGoogleUserId != nil {
		return *m.DEPRECATEDGoogleUserId
	}
	return ""
}

// This is the message that you return in response to a BidRequest.  You may
// specify zero or more ads.  For each ad, you should provide a list of ad slots
// on which the ad can run.  Ad slots are identifed by AdSlot.id from the
// BidRequest.  Each ad can win at most one ad slot.  If you do not wish to bid,
// submit a response with no ads and with only the processing_time_ms set.
//
type BidResponse struct {
	Ad []*BidResponse_Ad `protobuf:"bytes,2,rep,name=ad" json:"ad,omitempty"`
	// If is_test was set in the BidRequest, then you may return debug information
	// as plain text in this field.  Please do not set this field under normal
	// conditions, or set it to values longer than 100 characters.  You should
	// only use this field when asked to do so as part of troubleshooting
	// particular problems.
	DebugString *string `protobuf:"bytes,5,opt,name=debug_string" json:"debug_string,omitempty"`
	// Please set this to the processing time in milliseconds from when you
	// received the request to when you returned the response.
	ProcessingTimeMs *int32 `protobuf:"varint,4,opt,name=processing_time_ms" json:"processing_time_ms,omitempty"`
	// This is deprecated.  Please do not set.
	DEPRECATEDProtocolVersion *int32 `protobuf:"varint,1,opt,name=DEPRECATED_protocol_version" json:"DEPRECATED_protocol_version,omitempty"`
	XXX_unrecognized          []byte `json:"-"`
}

func (m *BidResponse) Reset()         { *m = BidResponse{} }
func (m *BidResponse) String() string { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()    {}

func (m *BidResponse) GetAd() []*BidResponse_Ad {
	if m != nil {
		return m.Ad
	}
	return nil
}

func (m *BidResponse) GetDebugString() string {
	if m != nil && m.DebugString != nil {
		return *m.DebugString
	}
	return ""
}

func (m *BidResponse) GetProcessingTimeMs() int32 {
	if m != nil && m.ProcessingTimeMs != nil {
		return *m.ProcessingTimeMs
	}
	return 0
}

func (m *BidResponse) GetDEPRECATEDProtocolVersion() int32 {
	if m != nil && m.DEPRECATEDProtocolVersion != nil {
		return *m.DEPRECATEDProtocolVersion
	}
	return 0
}

type BidResponse_Ad struct {
	// A unique identifier chosen by you for the creative in this response.
	// This must always be set, must be limited to at most 64 bytes, and must be
	// a valid UTF8 string.  Every buyer_creative_id you use must always be
	// associated with the same creative.  This field is used to communicate
	// approval statuses when issues are found.  Do not specify the same id for
	// different creatives, or all creatives will be disapproved if a problem
	// with a single creative is found.  Do not specify different ids for the
	// same creative in different responses or no creatives will be served since
	// approval status is assigned on a per-id basis.
	BuyerCreativeId *string `protobuf:"bytes,10,opt,name=buyer_creative_id" json:"buyer_creative_id,omitempty"`
	// The HTML snippet that will be placed on the web page to display the ad.
	// Please use BidResponse.Ad.AdSlot.adgroup_id to indicate which adgroup
	// this snippet is attributed to.  Only one of the following should be set:
	// html_snippet, video_url, snippet_template.
	HtmlSnippet *string `protobuf:"bytes,1,opt,name=html_snippet" json:"html_snippet,omitempty"`
	// The URL to fetch a video ad.  The URL should return an XML response that
	// conforms to the VAST 2.0 standard.  Please use
	// BidResponse.Ad.AdSlot.adgroup_id to indicate which adgroup to attribute
	// this ad to.  Only one of the following should be set: html_snippet,
	// video_url, snippet_template.  Only set this field if the BidRequest is
	// for an in-video ad (BidRequest.video is present).
	VideoUrl *string `protobuf:"bytes,9,opt,name=video_url" json:"video_url,omitempty"`
	// An HTML snippet in the form of a template and multiple parameter values.
	// See
	// https://developers.google.com/ad-exchange/rtb/response-guide/multiple-ads-guide
	// for details of how to use snippet_template and all the fields in
	// TemplateParameter.  Only one of the following should be set:
	// html_snippet, video_url, snippet_template.
	SnippetTemplate   *string                             `protobuf:"bytes,12,opt,name=snippet_template" json:"snippet_template,omitempty"`
	TemplateParameter []*BidResponse_Ad_TemplateParameter `protobuf:"bytes,13,rep,name=template_parameter" json:"template_parameter,omitempty"`
	// The set of destination URLs for the snippet.  This should include the
	// URLs that the user will go to if they click on the displayed ad, and any
	// URLs that are visible in the rendered ad.  It should not include
	// intermediate calls to the adserver that are unrelated to the final
	// landing page.  This data is used for post-filtering of publisher-blocked
	// URLs among other things.  A BidResponse that returns a snippet or video
	// ad but declares no click_through_url will be discarded.  Only set this
	// field if html_snippet or video_url are set.
	ClickThroughUrl []string `protobuf:"bytes,4,rep,name=click_through_url" json:"click_through_url,omitempty"`
	// All vendor types for the ads that may be shown from this snippet.  You
	// should only declare vendor ids listed in the vendors.txt file in the
	// technical documentation.  We will check to ensure that the vendors you
	// declare are in the allowed_vendor_type list sent in the BidRequest for
	// AdX publishers, or in gdn-vendors.txt for GDN publishers.
	VendorType []int32 `protobuf:"varint,5,rep,name=vendor_type" json:"vendor_type,omitempty"`
	// All attributes for the ads that may be shown from this snippet.  See
	// buyer-declarable-creative-attributes.txt in the technical documentation
	// for a list of ids. We will check to ensure none of these attributes are
	// in the excluded_attribute list in the BidRequest.
	Attribute []int32 `protobuf:"varint,6,rep,name=attribute" json:"attribute,omitempty"`
	// All sensitive categories for the ads that may be shown from this snippet.
	// See ad-sensitive-categories.txt in the technical documentation for a list
	// of ids.  We will check to ensure none of these categories were in the
	// excluded_sensitive_category list in the BidRequest.
	Category []int32 `protobuf:"varint,7,rep,name=category" json:"category,omitempty"`
	// All restricted categories for the ads that may be shown from this
	// snippet.  See ad-restricted-categories.txt in the technical documentation
	// for a list of ids.  We will check to ensure these categories were listed
	// in the allowed_restricted_category list in the BidRequest.  If you are
	// bidding with ads in restricted categories you MUST declare them here.
	RestrictedCategory []int32 `protobuf:"varint,17,rep,name=restricted_category" json:"restricted_category,omitempty"`
	// All names of the ad's advertisers.
	AdvertiserName []string `protobuf:"bytes,11,rep,name=advertiser_name" json:"advertiser_name,omitempty"`
	// The width and the height in pixels of the ad.  Setting these is optional.
	// However, these must be set if the bid BidRequest.AdSlot has more than one
	// width and height or if BidRequest.Mobile.is_interstitial_request is true.
	Width  *int32 `protobuf:"varint,14,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,15,opt,name=height" json:"height,omitempty"`
	// The Agency associated with this ad.  See agencies.txt file in the
	// technical documentation for a list of ids.  If this ad has no associated
	// agency then the value NONE (agency_id: 1) should be used rather than
	// leaving this field unset.
	AgencyId *int64                   `protobuf:"varint,16,opt,name=agency_id" json:"agency_id,omitempty"`
	Adslot   []*BidResponse_Ad_AdSlot `protobuf:"bytes,3,rep,name=adslot" json:"adslot,omitempty"`
	// These are deprecated.  Please do not set.
	DEPRECATEDCreativeId      *int64  `protobuf:"varint,8,opt,name=DEPRECATED_creative_id" json:"DEPRECATED_creative_id,omitempty"`
	DEPRECATEDClickThroughUrl *string `protobuf:"bytes,2,opt,name=DEPRECATED_click_through_url" json:"DEPRECATED_click_through_url,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *BidResponse_Ad) Reset()         { *m = BidResponse_Ad{} }
func (m *BidResponse_Ad) String() string { return proto.CompactTextString(m) }
func (*BidResponse_Ad) ProtoMessage()    {}

func (m *BidResponse_Ad) GetBuyerCreativeId() string {
	if m != nil && m.BuyerCreativeId != nil {
		return *m.BuyerCreativeId
	}
	return ""
}

func (m *BidResponse_Ad) GetHtmlSnippet() string {
	if m != nil && m.HtmlSnippet != nil {
		return *m.HtmlSnippet
	}
	return ""
}

func (m *BidResponse_Ad) GetVideoUrl() string {
	if m != nil && m.VideoUrl != nil {
		return *m.VideoUrl
	}
	return ""
}

func (m *BidResponse_Ad) GetSnippetTemplate() string {
	if m != nil && m.SnippetTemplate != nil {
		return *m.SnippetTemplate
	}
	return ""
}

func (m *BidResponse_Ad) GetTemplateParameter() []*BidResponse_Ad_TemplateParameter {
	if m != nil {
		return m.TemplateParameter
	}
	return nil
}

func (m *BidResponse_Ad) GetClickThroughUrl() []string {
	if m != nil {
		return m.ClickThroughUrl
	}
	return nil
}

func (m *BidResponse_Ad) GetVendorType() []int32 {
	if m != nil {
		return m.VendorType
	}
	return nil
}

func (m *BidResponse_Ad) GetAttribute() []int32 {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *BidResponse_Ad) GetCategory() []int32 {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *BidResponse_Ad) GetRestrictedCategory() []int32 {
	if m != nil {
		return m.RestrictedCategory
	}
	return nil
}

func (m *BidResponse_Ad) GetAdvertiserName() []string {
	if m != nil {
		return m.AdvertiserName
	}
	return nil
}

func (m *BidResponse_Ad) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *BidResponse_Ad) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *BidResponse_Ad) GetAgencyId() int64 {
	if m != nil && m.AgencyId != nil {
		return *m.AgencyId
	}
	return 0
}

func (m *BidResponse_Ad) GetAdslot() []*BidResponse_Ad_AdSlot {
	if m != nil {
		return m.Adslot
	}
	return nil
}

func (m *BidResponse_Ad) GetDEPRECATEDCreativeId() int64 {
	if m != nil && m.DEPRECATEDCreativeId != nil {
		return *m.DEPRECATEDCreativeId
	}
	return 0
}

func (m *BidResponse_Ad) GetDEPRECATEDClickThroughUrl() string {
	if m != nil && m.DEPRECATEDClickThroughUrl != nil {
		return *m.DEPRECATEDClickThroughUrl
	}
	return ""
}

type BidResponse_Ad_TemplateParameter struct {
	// The value of the parameter to substitute into the template.
	ParameterValue *string `protobuf:"bytes,1,opt,name=parameter_value" json:"parameter_value,omitempty"`
	// An alternate value of the parameter that when substituted into the
	// template will render a blank ad in the same bounding box as the real
	// ad.
	BlankAdParameterValue *string `protobuf:"bytes,8,opt,name=blank_ad_parameter_value" json:"blank_ad_parameter_value,omitempty"`
	// A buyer-specific creative id.  See the description in the parent
	// message for more details.  The field in the parent message should not
	// be set when using a template.
	BuyerCreativeId *string `protobuf:"bytes,2,opt,name=buyer_creative_id" json:"buyer_creative_id,omitempty"`
	// The destination URL for the creative.  See the description in the
	// parent message for more details.  The field in the parent message
	// should not be set when using a template.  Only a single URL is allowed,
	// unlike the field in the parent message.
	ClickThroughUrl *string `protobuf:"bytes,3,opt,name=click_through_url" json:"click_through_url,omitempty"`
	// The bounding box within the slot where the creative corresponding to
	// this parameter is rendered.  All the values are in pixels and (0,0)
	// coordinate is the bottom left corner.  For example, if the slot size is
	// 320x250 and the first creative occupies the top half of the slot, then
	// the bounding box values should be "left: 0 right: 320 top: 250 bottom
	// 125".
	Left   *int32 `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Right  *int32 `protobuf:"varint,5,opt,name=right" json:"right,omitempty"`
	Top    *int32 `protobuf:"varint,6,opt,name=top" json:"top,omitempty"`
	Bottom *int32 `protobuf:"varint,7,opt,name=bottom" json:"bottom,omitempty"`
	// Set this value if the parameter represents a backup ad for a parameter
	// at another index.  For example, if this parameter represents a backup
	// for the parameter at index 2, then backup_index=2.  Backup ads are not
	// required.  They should only be used in cases where non-backup ads may
	// need replacement for reasons that can change in the few milliseconds
	// between the time you submit the bid and the time the ad is shown to
	// user.  For example, budget or frequency capping constraints may fit
	// this requirement.  All parameters representing backup ads should come
	// after the non-backup parameters in the repeated template_parameter
	// field.
	BackupIndex      *int32 `protobuf:"varint,9,opt,name=backup_index" json:"backup_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidResponse_Ad_TemplateParameter) Reset()         { *m = BidResponse_Ad_TemplateParameter{} }
func (m *BidResponse_Ad_TemplateParameter) String() string { return proto.CompactTextString(m) }
func (*BidResponse_Ad_TemplateParameter) ProtoMessage()    {}

func (m *BidResponse_Ad_TemplateParameter) GetParameterValue() string {
	if m != nil && m.ParameterValue != nil {
		return *m.ParameterValue
	}
	return ""
}

func (m *BidResponse_Ad_TemplateParameter) GetBlankAdParameterValue() string {
	if m != nil && m.BlankAdParameterValue != nil {
		return *m.BlankAdParameterValue
	}
	return ""
}

func (m *BidResponse_Ad_TemplateParameter) GetBuyerCreativeId() string {
	if m != nil && m.BuyerCreativeId != nil {
		return *m.BuyerCreativeId
	}
	return ""
}

func (m *BidResponse_Ad_TemplateParameter) GetClickThroughUrl() string {
	if m != nil && m.ClickThroughUrl != nil {
		return *m.ClickThroughUrl
	}
	return ""
}

func (m *BidResponse_Ad_TemplateParameter) GetLeft() int32 {
	if m != nil && m.Left != nil {
		return *m.Left
	}
	return 0
}

func (m *BidResponse_Ad_TemplateParameter) GetRight() int32 {
	if m != nil && m.Right != nil {
		return *m.Right
	}
	return 0
}

func (m *BidResponse_Ad_TemplateParameter) GetTop() int32 {
	if m != nil && m.Top != nil {
		return *m.Top
	}
	return 0
}

func (m *BidResponse_Ad_TemplateParameter) GetBottom() int32 {
	if m != nil && m.Bottom != nil {
		return *m.Bottom
	}
	return 0
}

func (m *BidResponse_Ad_TemplateParameter) GetBackupIndex() int32 {
	if m != nil && m.BackupIndex != nil {
		return *m.BackupIndex
	}
	return 0
}

type BidResponse_Ad_AdSlot struct {
	// The slot id from the BidRequest that the ad may appear in.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// The maximum CPM you want to be charged if you win the auction for this
	// ad slot, expressed in micros of your account currency.  For example, to
	// bid a CPM of 1.29 USD, set max_cpm_micros = 1290000.  Winning bids are
	// rounded up to billable units.  For example, in USD, bids are rounded up
	// to the next multiple of 10,000 micros (one cent).
	MaxCpmMicros *int64 `protobuf:"varint,2,req,name=max_cpm_micros" json:"max_cpm_micros,omitempty"`
	// The minimum CPM you want to be charged if you win the auction for this
	// ad slot.  This may represent a second price if you choose max_cpm as
	// the highest of several bids, or some form of reserve price if you wish
	// to override the reserve price set by the publisher.  The bid must be
	// less than or equal to max_cpm_micros or it will be ignored.  This field
	// is optional and does not need to be set.
	MinCpmMicros *int64 `protobuf:"varint,3,opt,name=min_cpm_micros" json:"min_cpm_micros,omitempty"`
	// Id of the adgroup to attribute this impression to.  The value must be
	// in the set of adgroups for this slot that were sent in the
	// BidRequest.AdSlot.matching_ad_data.adgroup_id.  This must always be set
	// if the BidRequest has more than one BidRequest.AdSlot.matching_ad_data.
	AdgroupId *int64 `protobuf:"varint,4,opt,name=adgroup_id" json:"adgroup_id,omitempty"`
	// The deal id that you want this bid to participate in.  If left unset,
	// then AdX will choose a deal if one is available or use the open auction
	// otherwise.  Set this to "1" if a deal is available but you want to
	// ignore the deal and participate in the open auction.
	DealId           *int64 `protobuf:"varint,5,opt,name=deal_id,def=0" json:"deal_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BidResponse_Ad_AdSlot) Reset()         { *m = BidResponse_Ad_AdSlot{} }
func (m *BidResponse_Ad_AdSlot) String() string { return proto.CompactTextString(m) }
func (*BidResponse_Ad_AdSlot) ProtoMessage()    {}

const Default_BidResponse_Ad_AdSlot_DealId int64 = 0

func (m *BidResponse_Ad_AdSlot) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BidResponse_Ad_AdSlot) GetMaxCpmMicros() int64 {
	if m != nil && m.MaxCpmMicros != nil {
		return *m.MaxCpmMicros
	}
	return 0
}

func (m *BidResponse_Ad_AdSlot) GetMinCpmMicros() int64 {
	if m != nil && m.MinCpmMicros != nil {
		return *m.MinCpmMicros
	}
	return 0
}

func (m *BidResponse_Ad_AdSlot) GetAdgroupId() int64 {
	if m != nil && m.AdgroupId != nil {
		return *m.AdgroupId
	}
	return 0
}

func (m *BidResponse_Ad_AdSlot) GetDealId() int64 {
	if m != nil && m.DealId != nil {
		return *m.DealId
	}
	return Default_BidResponse_Ad_AdSlot_DealId
}

func init() {
	proto.RegisterType((*BidRequest)(nil), "google.BidRequest")
	proto.RegisterType((*BidRequest_Hyperlocal)(nil), "google.BidRequest.Hyperlocal")
	proto.RegisterType((*BidRequest_Hyperlocal_Point)(nil), "google.BidRequest.Hyperlocal.Point")
	proto.RegisterType((*BidRequest_HyperlocalSet)(nil), "google.BidRequest.HyperlocalSet")
	proto.RegisterType((*BidRequest_UserList)(nil), "google.BidRequest.UserList")
	proto.RegisterType((*BidRequest_Vertical)(nil), "google.BidRequest.Vertical")
	proto.RegisterType((*BidRequest_KeyValue)(nil), "google.BidRequest.KeyValue")
	proto.RegisterType((*BidRequest_Mobile)(nil), "google.BidRequest.Mobile")
	proto.RegisterType((*BidRequest_Mobile_DeviceOsVersion)(nil), "google.BidRequest.Mobile.DeviceOsVersion")
	proto.RegisterType((*BidRequest_Video)(nil), "google.BidRequest.Video")
	proto.RegisterType((*BidRequest_Video_CompanionSlot)(nil), "google.BidRequest.Video.CompanionSlot")
	proto.RegisterType((*BidRequest_AdSlot)(nil), "google.BidRequest.AdSlot")
	proto.RegisterType((*BidRequest_AdSlot_MatchingAdData)(nil), "google.BidRequest.AdSlot.MatchingAdData")
	proto.RegisterType((*BidRequest_AdSlot_MatchingAdData_DirectDeal)(nil), "google.BidRequest.AdSlot.MatchingAdData.DirectDeal")
	proto.RegisterType((*BidRequest_BidResponseFeedback)(nil), "google.BidRequest.BidResponseFeedback")
	proto.RegisterType((*BidRequest_MatchingNetwork)(nil), "google.BidRequest.MatchingNetwork")
	proto.RegisterType((*BidResponse)(nil), "google.BidResponse")
	proto.RegisterType((*BidResponse_Ad)(nil), "google.BidResponse.Ad")
	proto.RegisterType((*BidResponse_Ad_TemplateParameter)(nil), "google.BidResponse.Ad.TemplateParameter")
	proto.RegisterType((*BidResponse_Ad_AdSlot)(nil), "google.BidResponse.Ad.AdSlot")
	proto.RegisterEnum("google.BidRequest_Mobile_MobileDevType", BidRequest_Mobile_MobileDevType_name, BidRequest_Mobile_MobileDevType_value)
	proto.RegisterEnum("google.BidRequest_Mobile_ScreenOrientation", BidRequest_Mobile_ScreenOrientation_name, BidRequest_Mobile_ScreenOrientation_value)
	proto.RegisterEnum("google.BidRequest_Video_InventoryType", BidRequest_Video_InventoryType_name, BidRequest_Video_InventoryType_value)
	proto.RegisterEnum("google.BidRequest_Video_SkippableBidRequestType", BidRequest_Video_SkippableBidRequestType_name, BidRequest_Video_SkippableBidRequestType_value)
	proto.RegisterEnum("google.BidRequest_Video_GVideoFormat", BidRequest_Video_GVideoFormat_name, BidRequest_Video_GVideoFormat_value)
	proto.RegisterEnum("google.BidRequest_Video_CompanionSlot_CreativeFormat", BidRequest_Video_CompanionSlot_CreativeFormat_name, BidRequest_Video_CompanionSlot_CreativeFormat_value)
	proto.RegisterEnum("google.BidRequest_AdSlot_SlotVisibility", BidRequest_AdSlot_SlotVisibility_name, BidRequest_AdSlot_SlotVisibility_value)
}

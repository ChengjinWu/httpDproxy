// Code generated by protoc-gen-go.
// source: mega.proto
// DO NOT EDIT!

/*
Package mega is a generated protocol buffer package.

It is generated from these files:
	mega.proto

It has these top-level messages:
	MgxBidRequest
	MgxBidResponse
*/
package mega

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MgxBidRequest struct {
	// BidRequest结构版本，当前版本号为1
	Version *int32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	// 长度为32字节的广告请求唯一id
	BidGuid *string `protobuf:"bytes,2,req,name=bid_guid" json:"bid_guid,omitempty"`
	// 是否测试流量，用来标识是否对买方平台进行验证请求
	// 买方平台需要按照正常请求的标准进行响应，但需标识为测试请求
	IsTest *bool `protobuf:"varint,3,opt,name=is_test,def=0" json:"is_test,omitempty"`
	// 是否心跳测试，用来标识是否对买方平台的服务器链接进行测试
	// 买方平台响应Response时仅需要request中的bid_guid值
	IsPing *bool `protobuf:"varint,4,opt,name=is_ping,def=0" json:"is_ping,omitempty"`
	// 当前用户在Menlo Ad Exchange平台中的唯一ID （当前Cookie的Visitor ID）
	VisitorId *int64 `protobuf:"varint,5,req,name=visitor_id" json:"visitor_id,omitempty"`
	// 当前用户的IP地址(如192.168.1.1)
	Ip *string `protobuf:"bytes,6,req,name=ip" json:"ip,omitempty"`
	// 当前用户客户端的user agent信息
	UserAgent *string `protobuf:"bytes,7,req,name=user_agent" json:"user_agent,omitempty"`
	// 当前用户的客户端flash版本，0为未知
	FlashVersion *int32 `protobuf:"varint,8,opt,name=flash_version,def=0" json:"flash_version,omitempty"`
	// 当前用户的屏幕尺寸，格式为“长*宽”，例如1024*768
	ScreenSize *string `protobuf:"bytes,9,opt,name=screen_size" json:"screen_size,omitempty"`
	// 当前用户的系统语言
	Language *string `protobuf:"bytes,10,opt,name=language" json:"language,omitempty"`
	// 当前用户的人群标签
	UserSegment []string `protobuf:"bytes,11,rep,name=user_segment" json:"user_segment,omitempty"`
	// 当前用户的内容标签
	ContentTags []string `protobuf:"bytes,12,rep,name=content_tags" json:"content_tags,omitempty"`
	// PC网站在Menlo Ad Exchange中的唯一id
	SiteId *string `protobuf:"bytes,13,req,name=site_id" json:"site_id,omitempty"`
	// 广告位所在的页面URL
	Url              *string                    `protobuf:"bytes,14,opt,name=url" json:"url,omitempty"`
	Adslot           []*MgxBidRequest_AdSlot    `protobuf:"bytes,15,rep,name=adslot" json:"adslot,omitempty"`
	AdslotUnion      *MgxBidRequest_AdSlotUnion `protobuf:"bytes,16,opt,name=adslot_union" json:"adslot_union,omitempty"`
	Mobile           *MgxBidRequest_Mobile      `protobuf:"bytes,18,opt,name=mobile" json:"mobile,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *MgxBidRequest) Reset()         { *m = MgxBidRequest{} }
func (m *MgxBidRequest) String() string { return proto.CompactTextString(m) }
func (*MgxBidRequest) ProtoMessage()    {}

const Default_MgxBidRequest_IsTest bool = false
const Default_MgxBidRequest_IsPing bool = false
const Default_MgxBidRequest_FlashVersion int32 = 0

func (m *MgxBidRequest) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *MgxBidRequest) GetBidGuid() string {
	if m != nil && m.BidGuid != nil {
		return *m.BidGuid
	}
	return ""
}

func (m *MgxBidRequest) GetIsTest() bool {
	if m != nil && m.IsTest != nil {
		return *m.IsTest
	}
	return Default_MgxBidRequest_IsTest
}

func (m *MgxBidRequest) GetIsPing() bool {
	if m != nil && m.IsPing != nil {
		return *m.IsPing
	}
	return Default_MgxBidRequest_IsPing
}

func (m *MgxBidRequest) GetVisitorId() int64 {
	if m != nil && m.VisitorId != nil {
		return *m.VisitorId
	}
	return 0
}

func (m *MgxBidRequest) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *MgxBidRequest) GetUserAgent() string {
	if m != nil && m.UserAgent != nil {
		return *m.UserAgent
	}
	return ""
}

func (m *MgxBidRequest) GetFlashVersion() int32 {
	if m != nil && m.FlashVersion != nil {
		return *m.FlashVersion
	}
	return Default_MgxBidRequest_FlashVersion
}

func (m *MgxBidRequest) GetScreenSize() string {
	if m != nil && m.ScreenSize != nil {
		return *m.ScreenSize
	}
	return ""
}

func (m *MgxBidRequest) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *MgxBidRequest) GetUserSegment() []string {
	if m != nil {
		return m.UserSegment
	}
	return nil
}

func (m *MgxBidRequest) GetContentTags() []string {
	if m != nil {
		return m.ContentTags
	}
	return nil
}

func (m *MgxBidRequest) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *MgxBidRequest) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *MgxBidRequest) GetAdslot() []*MgxBidRequest_AdSlot {
	if m != nil {
		return m.Adslot
	}
	return nil
}

func (m *MgxBidRequest) GetAdslotUnion() *MgxBidRequest_AdSlotUnion {
	if m != nil {
		return m.AdslotUnion
	}
	return nil
}

func (m *MgxBidRequest) GetMobile() *MgxBidRequest_Mobile {
	if m != nil {
		return m.Mobile
	}
	return nil
}

// ********广告位信息*********
type MgxBidRequest_AdSlot struct {
	// 在页面上广告位的序列id
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// 当前广告位在Menlo Ad Exchange中唯一的Id
	MegaxAid *int32 `protobuf:"varint,2,req,name=megax_aid" json:"megax_aid,omitempty"`
	// 不允许的敏感广告行业类别
	ExcludeSensitiveCategory []int32 `protobuf:"varint,3,rep,name=exclude_sensitive_category" json:"exclude_sensitive_category,omitempty"`
	// 允许的展现形式
	// PC形式(1:固定，2:浮窗，3:视频)
	// Mobile APP形式(4:无线横幅)
	ViewType *int32 `protobuf:"varint,4,req,name=view_type" json:"view_type,omitempty"`
	// 广告位宽度
	AdsWidth *int32 `protobuf:"varint,5,req,name=ads_width" json:"ads_width,omitempty"`
	// 广告位高度
	AdsHeight *int32 `protobuf:"varint,6,req,name=ads_height" json:"ads_height,omitempty"`
	// 广告位所在页面的屏幕位置，mobile固定为1
	PageNum *int32 `protobuf:"varint,7,req,name=page_num" json:"page_num,omitempty"`
	// 所属的媒体类别
	MediaType []int32 `protobuf:"varint,10,rep,name=media_type" json:"media_type,omitempty"`
	// 所属的交易类型（1:竞价，2:固定价格）
	TransactionType []int32 `protobuf:"varint,11,rep,name=transaction_type" json:"transaction_type,omitempty"`
	// 买方id集合
	BuyerId []string `protobuf:"bytes,9,rep,name=buyer_id" json:"buyer_id,omitempty"`
	// 不同买方对应不同的交易价格，通过集合下标来映射关系
	// 不同买方对应的交易价格集合(人民币:分/千次展现)
	BuyerMinPrice    []uint32 `protobuf:"varint,8,rep,name=buyer_min_price" json:"buyer_min_price,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MgxBidRequest_AdSlot) Reset()         { *m = MgxBidRequest_AdSlot{} }
func (m *MgxBidRequest_AdSlot) String() string { return proto.CompactTextString(m) }
func (*MgxBidRequest_AdSlot) ProtoMessage()    {}

func (m *MgxBidRequest_AdSlot) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetMegaxAid() int32 {
	if m != nil && m.MegaxAid != nil {
		return *m.MegaxAid
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetExcludeSensitiveCategory() []int32 {
	if m != nil {
		return m.ExcludeSensitiveCategory
	}
	return nil
}

func (m *MgxBidRequest_AdSlot) GetViewType() int32 {
	if m != nil && m.ViewType != nil {
		return *m.ViewType
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetAdsWidth() int32 {
	if m != nil && m.AdsWidth != nil {
		return *m.AdsWidth
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetAdsHeight() int32 {
	if m != nil && m.AdsHeight != nil {
		return *m.AdsHeight
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *MgxBidRequest_AdSlot) GetMediaType() []int32 {
	if m != nil {
		return m.MediaType
	}
	return nil
}

func (m *MgxBidRequest_AdSlot) GetTransactionType() []int32 {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (m *MgxBidRequest_AdSlot) GetBuyerId() []string {
	if m != nil {
		return m.BuyerId
	}
	return nil
}

func (m *MgxBidRequest_AdSlot) GetBuyerMinPrice() []uint32 {
	if m != nil {
		return m.BuyerMinPrice
	}
	return nil
}

// ********竞价联动广告位信息*********
type MgxBidRequest_AdSlotUnion struct {
	// adslot的序列id组合，用于联动广告的售卖方式
	AdslotIndexIds []int32 `protobuf:"varint,1,rep,name=adslot_index_ids" json:"adslot_index_ids,omitempty"`
	// 不同买家对应的最小竞价的集合(人民币:分/千次展现)
	BuyerMinPrice []uint32 `protobuf:"varint,2,rep,name=buyer_min_price" json:"buyer_min_price,omitempty"`
	// 买家id集合
	BuyerId []string `protobuf:"bytes,3,rep,name=buyer_id" json:"buyer_id,omitempty"`
	// 所属的交易类型（1:竞价，2:固定价格）
	TransactionType  []int32 `protobuf:"varint,4,rep,name=transaction_type" json:"transaction_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MgxBidRequest_AdSlotUnion) Reset()         { *m = MgxBidRequest_AdSlotUnion{} }
func (m *MgxBidRequest_AdSlotUnion) String() string { return proto.CompactTextString(m) }
func (*MgxBidRequest_AdSlotUnion) ProtoMessage()    {}

func (m *MgxBidRequest_AdSlotUnion) GetAdslotIndexIds() []int32 {
	if m != nil {
		return m.AdslotIndexIds
	}
	return nil
}

func (m *MgxBidRequest_AdSlotUnion) GetBuyerMinPrice() []uint32 {
	if m != nil {
		return m.BuyerMinPrice
	}
	return nil
}

func (m *MgxBidRequest_AdSlotUnion) GetBuyerId() []string {
	if m != nil {
		return m.BuyerId
	}
	return nil
}

func (m *MgxBidRequest_AdSlotUnion) GetTransactionType() []int32 {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

// ********Mobile扩展信息**********
type MgxBidRequest_Mobile struct {
	// 当前应用在Menlo Ad Exchange中唯一的Id
	AppId *int32 `protobuf:"varint,1,req,name=app_id" json:"app_id,omitempty"`
	// Mobile设备唯一标识类型
	// 1:mac (适用于iOS7以前版本及android设备)
	// 2:imei（仅适用于android）
	// 3:anid（仅适用于android）
	// 4:idfa（仅适用于iOS6以后版本设备）
	// 5:ouid（适用于android和iOS设备）
	// 6:vdid（仅适用于iOS）
	// 7:ctmid(自定义唯一标识，适用于android和iOS设备)
	DeviceUniqueType *int32 `protobuf:"varint,2,req,name=device_unique_type" json:"device_unique_type,omitempty"`
	// 设备唯一标识
	DeviceUniqueId *string `protobuf:"bytes,3,req,name=device_unique_id" json:"device_unique_id,omitempty"`
	// 设备品牌,例如：Google，Apple
	DeviceBrand *string `protobuf:"bytes,4,req,name=device_brand" json:"device_brand,omitempty"`
	// 设备型号，例如：Nexus%20S
	DeviceModel *string `protobuf:"bytes,5,req,name=device_model" json:"device_model,omitempty"`
	// 设备操作系统（完整名称，带版本号），例如：Android%204.2.2
	DeviceOs *string `protobuf:"bytes,6,req,name=device_os" json:"device_os,omitempty"`
	// 设备分辨率（当前屏幕方向，widthxheight），例如：640x480
	DeviceRs *string `protobuf:"bytes,7,req,name=device_rs" json:"device_rs,omitempty"`
	// 终端上网方式（0:未知，1:Wifi，2:2G，3:3G，4:4G）
	DeviceNet *int32 `protobuf:"varint,8,req,name=device_net" json:"device_net,omitempty"`
	// 终端运营商（0:移动，1:联通，2:电信，3:其他（如铁通、教育网，政府网，国外等））
	DeviceCommunicationOperatorsId *int32 `protobuf:"varint,9,req,name=device_communication_operators_id" json:"device_communication_operators_id,omitempty"`
	XXX_unrecognized               []byte `json:"-"`
}

func (m *MgxBidRequest_Mobile) Reset()         { *m = MgxBidRequest_Mobile{} }
func (m *MgxBidRequest_Mobile) String() string { return proto.CompactTextString(m) }
func (*MgxBidRequest_Mobile) ProtoMessage()    {}

func (m *MgxBidRequest_Mobile) GetAppId() int32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *MgxBidRequest_Mobile) GetDeviceUniqueType() int32 {
	if m != nil && m.DeviceUniqueType != nil {
		return *m.DeviceUniqueType
	}
	return 0
}

func (m *MgxBidRequest_Mobile) GetDeviceUniqueId() string {
	if m != nil && m.DeviceUniqueId != nil {
		return *m.DeviceUniqueId
	}
	return ""
}

func (m *MgxBidRequest_Mobile) GetDeviceBrand() string {
	if m != nil && m.DeviceBrand != nil {
		return *m.DeviceBrand
	}
	return ""
}

func (m *MgxBidRequest_Mobile) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *MgxBidRequest_Mobile) GetDeviceOs() string {
	if m != nil && m.DeviceOs != nil {
		return *m.DeviceOs
	}
	return ""
}

func (m *MgxBidRequest_Mobile) GetDeviceRs() string {
	if m != nil && m.DeviceRs != nil {
		return *m.DeviceRs
	}
	return ""
}

func (m *MgxBidRequest_Mobile) GetDeviceNet() int32 {
	if m != nil && m.DeviceNet != nil {
		return *m.DeviceNet
	}
	return 0
}

func (m *MgxBidRequest_Mobile) GetDeviceCommunicationOperatorsId() int32 {
	if m != nil && m.DeviceCommunicationOperatorsId != nil {
		return *m.DeviceCommunicationOperatorsId
	}
	return 0
}

type MgxBidResponse struct {
	// BidResponse结构版本，当前为1
	Version *int32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	// 广告请求的唯一ID
	BidGuid          *string                      `protobuf:"bytes,2,req,name=bid_guid" json:"bid_guid,omitempty"`
	Adslot           []*MgxBidResponse_AdSlot     `protobuf:"bytes,3,rep,name=adslot" json:"adslot,omitempty"`
	AdslotUnion      *MgxBidResponse_AdSlot_Union `protobuf:"bytes,4,opt,name=adslot_union" json:"adslot_union,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *MgxBidResponse) Reset()         { *m = MgxBidResponse{} }
func (m *MgxBidResponse) String() string { return proto.CompactTextString(m) }
func (*MgxBidResponse) ProtoMessage()    {}

func (m *MgxBidResponse) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *MgxBidResponse) GetBidGuid() string {
	if m != nil && m.BidGuid != nil {
		return *m.BidGuid
	}
	return ""
}

func (m *MgxBidResponse) GetAdslot() []*MgxBidResponse_AdSlot {
	if m != nil {
		return m.Adslot
	}
	return nil
}

func (m *MgxBidResponse) GetAdslotUnion() *MgxBidResponse_AdSlot_Union {
	if m != nil {
		return m.AdslotUnion
	}
	return nil
}

// ********广告位购买信息*********
type MgxBidResponse_AdSlot struct {
	// 在页面上广告位的序列id
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// 当前广告位在Menlo Ad Exchange中唯一的Id
	MegaxAid *int32 `protobuf:"varint,2,req,name=megax_aid" json:"megax_aid,omitempty"`
	// 买方对该广告位的购买价格(人民币:分/千次展现)
	// 在固定交易时只要购买价格>=协议价格，即以协议价格成交
	MaxCpmMicros *int64 `protobuf:"varint,3,req,name=max_cpm_micros" json:"max_cpm_micros,omitempty"`
	// 参与程序化购买的买方在Menlo Ad Exchange中的唯一ID
	BuyerId *string `protobuf:"bytes,4,req,name=buyer_id" json:"buyer_id,omitempty"`
	// 广告主在买方平台中的唯一id（用于广告主审核）
	AdvertiserId *string `protobuf:"bytes,5,req,name=advertiser_id" json:"advertiser_id,omitempty"`
	// 提供素材的方式
	// 1:图片, 2: flash（无线广告不支持）
	// 3:flv（无线广告不支持）
	// 4:代码（iframe/html代码，无线广告不支持）
	CreativeFormat *int32 `protobuf:"varint,6,req,name=creative_format" json:"creative_format,omitempty"`
	// 素材的文件地址/代码/
	// 素材的文件地址/代码/
	// 若为代码则必须实现点击宏，一共有3种
	// 非编码支持跳转点击宏：%%MGX_CLICK_URL%%
	// 编码点击宏：%%MGX_CLICK_URL_ESC%%
	// 两次编码点击宏：%%MGX_CLICK_URL_ESC_ESC%%
	// 在广告点击时调用该宏来帮Menlo Ad Exchange监测点击数据
	CreativeContent *string `protobuf:"bytes,7,req,name=creative_content" json:"creative_content,omitempty"`
	// 素材高度
	CreativeHeight *int32 `protobuf:"varint,8,req,name=creative_height" json:"creative_height,omitempty"`
	// 素材宽度
	CreativeWidth *int32 `protobuf:"varint,9,req,name=creative_width" json:"creative_width,omitempty"`
	// 创意在DSP中的唯一ID，仅收集(用于数据对比和创意审核)
	CreativeId *string `protobuf:"bytes,10,opt,name=creative_id" json:"creative_id,omitempty"`
	// 广告点击目标地址，素材使用代码时不需要
	ClickThroughUrl *string `protobuf:"bytes,11,opt,name=click_through_url" json:"click_through_url,omitempty"`
	// 预留PV监测，素材使用代码时不需要
	ImpressionTracking []string `protobuf:"bytes,12,rep,name=impression_tracking" json:"impression_tracking,omitempty"`
	// 预留点击监测，素材使用代码时不需要
	ClickTracking []string `protobuf:"bytes,13,rep,name=click_tracking" json:"click_tracking,omitempty"`
	// 自定义数据(会返回给bidresult)
	ExtendData       *string `protobuf:"bytes,14,opt,name=extend_data" json:"extend_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MgxBidResponse_AdSlot) Reset()         { *m = MgxBidResponse_AdSlot{} }
func (m *MgxBidResponse_AdSlot) String() string { return proto.CompactTextString(m) }
func (*MgxBidResponse_AdSlot) ProtoMessage()    {}

func (m *MgxBidResponse_AdSlot) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetMegaxAid() int32 {
	if m != nil && m.MegaxAid != nil {
		return *m.MegaxAid
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetMaxCpmMicros() int64 {
	if m != nil && m.MaxCpmMicros != nil {
		return *m.MaxCpmMicros
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetBuyerId() string {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return ""
}

func (m *MgxBidResponse_AdSlot) GetAdvertiserId() string {
	if m != nil && m.AdvertiserId != nil {
		return *m.AdvertiserId
	}
	return ""
}

func (m *MgxBidResponse_AdSlot) GetCreativeFormat() int32 {
	if m != nil && m.CreativeFormat != nil {
		return *m.CreativeFormat
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetCreativeContent() string {
	if m != nil && m.CreativeContent != nil {
		return *m.CreativeContent
	}
	return ""
}

func (m *MgxBidResponse_AdSlot) GetCreativeHeight() int32 {
	if m != nil && m.CreativeHeight != nil {
		return *m.CreativeHeight
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetCreativeWidth() int32 {
	if m != nil && m.CreativeWidth != nil {
		return *m.CreativeWidth
	}
	return 0
}

func (m *MgxBidResponse_AdSlot) GetCreativeId() string {
	if m != nil && m.CreativeId != nil {
		return *m.CreativeId
	}
	return ""
}

func (m *MgxBidResponse_AdSlot) GetClickThroughUrl() string {
	if m != nil && m.ClickThroughUrl != nil {
		return *m.ClickThroughUrl
	}
	return ""
}

func (m *MgxBidResponse_AdSlot) GetImpressionTracking() []string {
	if m != nil {
		return m.ImpressionTracking
	}
	return nil
}

func (m *MgxBidResponse_AdSlot) GetClickTracking() []string {
	if m != nil {
		return m.ClickTracking
	}
	return nil
}

func (m *MgxBidResponse_AdSlot) GetExtendData() string {
	if m != nil && m.ExtendData != nil {
		return *m.ExtendData
	}
	return ""
}

// ********竞价联动广告位信息*********
type MgxBidResponse_AdSlot_Union struct {
	// adslot的序列id组合，用于联动广告的售卖方式
	AdslotIndexIds []int32 `protobuf:"varint,1,rep,name=adslot_index_ids" json:"adslot_index_ids,omitempty"`
	// DSP对该广告位的出价价格(人民币:分/千次展现)
	MaxCpmPrice *int64 `protobuf:"varint,2,req,name=max_cpm_price" json:"max_cpm_price,omitempty"`
	// 参与竞价的DSP(buyer)在MegaMeida中的唯一ID，由MegaMeida固定分配
	BuyerId          *string `protobuf:"bytes,3,req,name=buyer_id" json:"buyer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MgxBidResponse_AdSlot_Union) Reset()         { *m = MgxBidResponse_AdSlot_Union{} }
func (m *MgxBidResponse_AdSlot_Union) String() string { return proto.CompactTextString(m) }
func (*MgxBidResponse_AdSlot_Union) ProtoMessage()    {}

func (m *MgxBidResponse_AdSlot_Union) GetAdslotIndexIds() []int32 {
	if m != nil {
		return m.AdslotIndexIds
	}
	return nil
}

func (m *MgxBidResponse_AdSlot_Union) GetMaxCpmPrice() int64 {
	if m != nil && m.MaxCpmPrice != nil {
		return *m.MaxCpmPrice
	}
	return 0
}

func (m *MgxBidResponse_AdSlot_Union) GetBuyerId() string {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return ""
}

func init() {
	proto.RegisterType((*MgxBidRequest)(nil), "mega.MgxBidRequest")
	proto.RegisterType((*MgxBidRequest_AdSlot)(nil), "mega.MgxBidRequest.AdSlot")
	proto.RegisterType((*MgxBidRequest_AdSlotUnion)(nil), "mega.MgxBidRequest.AdSlot_union")
	proto.RegisterType((*MgxBidRequest_Mobile)(nil), "mega.MgxBidRequest.Mobile")
	proto.RegisterType((*MgxBidResponse)(nil), "mega.MgxBidResponse")
	proto.RegisterType((*MgxBidResponse_AdSlot)(nil), "mega.MgxBidResponse.AdSlot")
	proto.RegisterType((*MgxBidResponse_AdSlot_Union)(nil), "mega.MgxBidResponse.AdSlot_Union")
}

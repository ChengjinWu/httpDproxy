// Code generated by protoc-gen-go.
// source: bid_response.proto
// DO NOT EDIT!

/*
Package qax is a generated protocol buffer package.

It is generated from these files:
	bid_response.proto

It has these top-level messages:
	Settlement
	Bid
	Seatbid
	BidResponse
*/
package qax

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This message will be sent through the impression URL that is specified in the
// VAST XML when an advertisement is displayed to user successfully.
type Settlement struct {
	// This filed can be used to dynamically determine the specific algorithm
	// for generating the fields "price" and "auth". You don't need to care the
	// value of this field until you are told to.
	Version *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Encrypted price.
	Price []byte `protobuf:"bytes,2,req,name=price" json:"price,omitempty"`
	// Authentication information for "price".
	Auth             []byte `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Settlement) Reset()         { *m = Settlement{} }
func (m *Settlement) String() string { return proto.CompactTextString(m) }
func (*Settlement) ProtoMessage()    {}

func (m *Settlement) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Settlement) GetPrice() []byte {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Settlement) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

type Bid struct {
	// ID for the bid object chosen by the bidder for tracking and debugging
	// purposes. It is useful when multiple bids are submitted for a single
	// impression for a given seat.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// ID of the impression object to which this bid applies.
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	// The bidding price in RMB(cent per CPM).
	Price *int32 `protobuf:"varint,3,req,name=price" json:"price,omitempty"`
	// The VAST XML for describing the advertisement of this bid.
	Adm *string `protobuf:"bytes,6,req,name=adm" json:"adm,omitempty"`
	// The id of the creative to be presented to viewers. This field should be
	// populated with the "tvid" that is responded when the creative is uploaded.
	Crid *string `protobuf:"bytes,10,req,name=crid" json:"crid,omitempty"`
	// If the startdelay of an impression object from BidRequest is X, then the
	// valid value of this field is X + N * 15, N = 0, 1, 2, ...
	// Note, if a DSP hopes to have more opportunity to gain an impression, this
	// field should not be set.
	Startdelay *int32 `protobuf:"varint,16,opt,name=startdelay" json:"startdelay,omitempty"`
	// When a bid is returned according to user data such as age, interest,
	// gender and so on, this field should be set to true.
	IsPrecisionAdvertising *bool                     `protobuf:"varint,17,opt,name=is_precision_advertising,def=0" json:"is_precision_advertising,omitempty"`
	XXX_extensions         map[int32]proto.Extension `json:"-"`
	XXX_unrecognized       []byte                    `json:"-"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}

var extRange_Bid = []proto.ExtensionRange{
	{100, 536870911},
}

func (*Bid) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Bid
}
func (m *Bid) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_Bid_IsPrecisionAdvertising bool = false

func (m *Bid) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Bid) GetImpid() string {
	if m != nil && m.Impid != nil {
		return *m.Impid
	}
	return ""
}

func (m *Bid) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Bid) GetAdm() string {
	if m != nil && m.Adm != nil {
		return *m.Adm
	}
	return ""
}

func (m *Bid) GetCrid() string {
	if m != nil && m.Crid != nil {
		return *m.Crid
	}
	return ""
}

func (m *Bid) GetStartdelay() int32 {
	if m != nil && m.Startdelay != nil {
		return *m.Startdelay
	}
	return 0
}

func (m *Bid) GetIsPrecisionAdvertising() bool {
	if m != nil && m.IsPrecisionAdvertising != nil {
		return *m.IsPrecisionAdvertising
	}
	return Default_Bid_IsPrecisionAdvertising
}

type Seatbid struct {
	// The list of bid objects. Each bid object should be related to an impression
	// object in the bid request.
	Bid              []*Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Seatbid) Reset()         { *m = Seatbid{} }
func (m *Seatbid) String() string { return proto.CompactTextString(m) }
func (*Seatbid) ProtoMessage()    {}

func (m *Seatbid) GetBid() []*Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

type BidResponse struct {
	// This id should be the same as the id of the corresponding BidRequest.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The list of seatbid objects.
	Seatbid []*Seatbid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// If BidRequest.is_ping is true, please set this filed with your processing
	// time in milliseconds from receiving request to returning response.
	ProcessingTimeMs *int32                    `protobuf:"varint,4,opt,name=processing_time_ms" json:"processing_time_ms,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidResponse) Reset()         { *m = BidResponse{} }
func (m *BidResponse) String() string { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()    {}

var extRange_BidResponse = []proto.ExtensionRange{
	{100, 536870911},
}

func (*BidResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse
}
func (m *BidResponse) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidResponse) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*Seatbid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetProcessingTimeMs() int32 {
	if m != nil && m.ProcessingTimeMs != nil {
		return *m.ProcessingTimeMs
	}
	return 0
}

func init() {
	proto.RegisterType((*Settlement)(nil), "qax.Settlement")
	proto.RegisterType((*Bid)(nil), "qax.Bid")
	proto.RegisterType((*Seatbid)(nil), "qax.Seatbid")
	proto.RegisterType((*BidResponse)(nil), "qax.BidResponse")
}
